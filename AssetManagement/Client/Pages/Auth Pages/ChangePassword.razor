@page "/reset-password"
@layout LoginLayout
@inject NavigationManager navigationManager
@inject IdentityAuthenticationStateProvider authStateProvider
@using AssetManagement.Client.Shared.Popup
@using AssetManagement.Dto.Auth
@attribute [Authorize]

<PageTitle>Reset Password</PageTitle>


<div>
    <EditForm class="form-signin p-2" OnValidSubmit="OnSubmit" Model="resetPassword">
        <DataAnnotationsValidator />
        <div class="col-auto" style=" width:100%; text-align:center; line-height:0px; margin-top: 2px;">
            <UiAlert Model="alert"></UiAlert>
        </div>
        <div class="form-floating mb-3">
            <InputText id="CurrentPassword" class="form-control" @bind-Value="resetPassword.CurrentPassword" autofocus placeholder="Current Password" />
            <label for="CurrentPassword">Current Password</label>
            <ValidationMessage For="@(() => resetPassword.CurrentPassword)" />
        </div>

        <div class="form-floating mb-3">
            <InputText id="NewPassword" type="password" class="form-control" @bind-Value="resetPassword.NewPassword" placeholder="Nre Password" />
            <label for="NewPassword">New Password</label>
            <ValidationMessage For="@(() => resetPassword.NewPassword)" />
        </div>

        <div class="form-floating mb-3">
            <InputText id="ConfirmPassword" type="password" class="form-control" @bind-Value="resetPassword.ConfirmPassword" placeholder="Confirm Password" />
            <label for="ConfirmPassword">Confirm Password</label>
            <ValidationMessage For="@(() => resetPassword.ConfirmPassword)" />
        </div>

        <div class="d-grid gap-2">
            <button class="btn btn-lg btn-primary btn-sm" type="submit">Update</button>
        </div>

    </EditForm>

</div>


@code {
    ResetPassword resetPassword = new();
    private Timer _timer;
    private int _delay = 3000;

    [CascadingParameter]
    protected AlertModel? alert { get; set; }

    protected override async Task OnInitializedAsync()
    {
        alert ??= new AlertModel();
    }
    async Task OnSubmit()
    {
        alert?.Clear();
        alert?.SetSuccess("Please wait...");
        try
        {
            var res = await authStateProvider.ChangePassword(resetPassword);
            if (res.Item1 == true)
            { alert?.SetSuccess(res.Item2); }
            else
                alert?.SetError(res.Item2);
        }
        catch (Exception ex)
        {
            alert?.SetError(ex.Message);
        }
        _timer = new Timer(TimerCallback, null, _delay, Timeout.Infinite);
    }

    private void TimerCallback(Object o)
    {
        alert?.Clear();
        _timer.Dispose();
        StateHasChanged();
    }
}