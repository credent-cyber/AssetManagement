@page "/admin-controls"
@using AssetManagement.Client.Shared.Popup
@inject IdentityAuthenticationStateProvider authStateProvider
@using AssetManagement.Dto.Auth
@using AssetManagement.Roles
@inject NavigationManager navigationManager
@inject IAuthorizeApi authorizeApi
@attribute [Authorize(Roles = "SuperAdmin,Admin")]

@if (users == null)
{
    <p>Loading...</p>
}
else if (users.Count == 0)
{
    <p>No users found.</p>
}
else
{
    <div class="card">
        <div class="card-header bg-secondary text-center">
            @Title
        </div>
        <div class="card-body">
            <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" Outlined="true">
                <MudTabPanel Text="All Users">
                    <MudText>
                        <div class="table-responsive">
                            <table class="table table-striped table-bordered nowrap">
                                <thead>
                                    <tr>
                                        <th>Username</th>
                                        <th>Email</th>
                                        <th>Current Role</th>
                                        <th>Update Role</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var user in users)
                                    {
                                        <tr>
                                            <td>@user.UserName</td>
                                            <td>@user.Email</td>
                                            <td>@user.Role</td>
                                            <td>
                                                <select @bind="user.Role" class="form-control">
                                                    @foreach (var role in Roles)
                                                    {
                                                        <option value="@role">@role</option>
                                                    }
                                                </select>
                                            </td>
                                            <td>
                                                <button class="btn text-success" title="Update" @onclick="() => UpdateUserRole(user)" style="background-color:transparent; border:none;">
                                                    <i class="fa fa-floppy-o fa-2x" aria-hidden="true"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </MudText>
                </MudTabPanel>
                <MudTabPanel Text="Register User">
                    <MudText>
                        <div class="container mt-md-5">
                            <div class="row justify-content-md-center">
                                <div class="col-sm-6">
                                    <div class="card">
                                        <div class="card-header">
                                            <h1 class="h2 text-center">Create Account</h1>
                                        </div>
                                        <div class="card-body">
                                            <EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="registerParameters">
                                                <DataAnnotationsValidator />

                                                <div class="form-floating mb-3">
                                                    <InputText id="inputUsername" class="form-control" @bind-Value="registerParameters.UserName" autofocus placeholder="Username" />
                                                    <label for="inputUsername">User Name</label>
                                                    <ValidationMessage For="@(() => registerParameters.UserName)" />
                                                </div>

                                                <div class="form-floating mb-3">
                                                    <InputText id="inputUserEmail" class="form-control" @bind-Value="registerParameters.Email" autofocus placeholder="Email" />
                                                    <label for="inputUserEmail">User Email</label>
                                                    <ValidationMessage For="@(() => registerParameters.Email)" />
                                                </div>

                                                <div class="form-floating mb-3">
                                                    <InputText type="password" id="inputPassword" class="form-control" placeholder="Password" @bind-Value="registerParameters.Password" />
                                                    <label for="inputPassword">Password</label>
                                                    <ValidationMessage For="@(() => registerParameters.Password)" />
                                                </div>

                                                <div class="form-floating mb-3">
                                                    <InputText type="password" id="inputPasswordConfirm" class="form-control" placeholder="Password Confirmation" @bind-Value="registerParameters.PasswordConfirm" />
                                                    <label for="inputPasswordConfirm">Password Confirmation</label>
                                                    <ValidationMessage For="@(() => registerParameters.PasswordConfirm)" />
                                                </div>

                                                <div class="d-grid gap-2">
                                                    <button class="btn btn-lg btn-primary btn-block" type="submit">Create account</button>
                                                </div>

                                                <label class="text-danger">@error</label>
                                            </EditForm>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </MudText>
                </MudTabPanel>
            </MudTabs>
            <Dailog Title="@Message" Show="@show" OnCloseDialog="ResetForm">
                @if (show)
                {
                    @if (TaskCompleted)
                    {
                        <div style="text-align:center;">
                            @MessageBody
                        </div>
                    }
                    else
                    {
                        <div style="text-align:center">
                            <div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
                        </div>
                    }
                }
            </Dailog>

        </div>
    </div>
}

@code {
    private List<UserViewModel> users;
    private List<string> Roles;
    string Title = "Admin Control Panel";
    private bool show = false;
    string Message = string.Empty;
    string MessageBody = "Thank you!";
    bool TaskCompleted = false;

    protected override async Task OnInitializedAsync()
    {
        users = await authorizeApi.GetUsers();
        Roles = await authStateProvider.GetRoles();
    }

    private async Task UpdateUserRole(UserViewModel user)
    {
        await authorizeApi.UpdateUserRole(user);
    }

    RegisterParameters registerParameters { get; set; } = new RegisterParameters();
    string error { get; set; }

    async Task OnSubmit()
    {
        error = null;
        Message = string.Empty;
        MessageBody = "Thank you!";
        show = true;
        TaskCompleted = false;
        try
        {
            Message = "Please wait";
            await authorizeApi.Register(registerParameters);
            Message = "Successfully Registered";
            TaskCompleted = true;          
        }
        catch (Exception ex)
        {
            show = false;
            error = ex.Message;
        }

    }

    private async void ResetForm()
    {
        show = false;
        if (Message.Contains("Successfully Registered"))
        {
            registerParameters = new();
        }
        users = await authorizeApi.GetUsers();
        StateHasChanged();
    }
}
