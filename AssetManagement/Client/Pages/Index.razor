@page "/"
@using AssetManagement.Client.Client;
@using AssetManagement.Client.Helpers;
@using AssetManagement.Client.Shared.ChartJs
@using AssetManagement.Dto.Dashboard;
@using AssetManagement.Dto.Models;
@inject AppClient client
@attribute [Authorize]
@inject IJSRuntime JSRuntime

<div class="card-body">
    <div class="row">
        <div class="col-3">
            <div class="mb-3">
                <label class="form-label">Select Asset</label>
                <DropdownSelect @bind-Value="selectedAssetId"
                                EventDropdown="OnAssetChanged"
                                DataSource="DropdownAssett"
                                EmptyText="Select an asset"
                                Css="form-select form-select-sm" />
            </div>
        </div>
    </div>
</div>


@code {

    public string SelectedCompany = string.Empty;
    public List<ChartJsDataset> CompanyStatics { get; set; } = new List<ChartJsDataset>();
    public string[]? CompanyStaticsLabels { get; set; }

    public List<ChartJsDataset> AssetsStatics { get; set; } = new List<ChartJsDataset>();
    public string[]? AssetsStaticsLabels { get; set; }

    public List<ChartJsDataset> EmployeeStatics { get; set; } = new List<ChartJsDataset>();
    public string[]? EmployeeStaticsLabels { get; set; }

    public string AllocationCompanyCode { get; set; } = string.Empty;
    public List<string> AllocationChartData { get; set; } = new List<string>();
    public List<string> AllocationChartBackground { get; set; } = new List<string>() { "#A9CCE3", "#82E0AA ", "#DE3163", "#40E0D0", "#FF7F50", "#E6B0AA", "#D7BDE2", "#CCD1D1", "#FF5370", "#0e9e4a", "#FFB64D", "#00E396", "#775DD0", "#4099ff", "#f2930a", "#00bcd4" };
    public List<string> AllocationChartLabels { get; set; } = new List<string>();

    public List<string> AssetChartData { get; set; } = new List<string>();
    public List<string> AssetChartBackground { get; set; } = new List<string>() { "#CCD1D1", "#FF5370", "#0e9e4a", "#FFB64D", "#00E396", "#775DD0", "#4099ff", "#f2930a", "#00bcd4" };
    public List<string> AssetChartLabels { get; set; } = new List<string>();

    public List<string> CompanyCodes = new();
    DashboardStatics dashboardStatics = new();
    MasterStatics MasterStatics = new();
 


    private List<KeyValuePair<string, string>> DropdownAssett;
    private string selectedAssetId;
    protected override async Task OnInitializedAsync()
    {
        // Fetch assets from your service (e.g., using an API client)
        var assets = new List<Asset>(await client.GetAllAsset());

        // Convert to dropdown format
        DropdownAssett = assets.Select(a => new KeyValuePair<string, string>(a.Id.ToString(), $"{a.Brand} {a.Model} ({a.SerialNumber})")).ToList();

        var StartDate = new DateTime(DateTime.Now.Year, 1, 1);
        var EndDate = new DateTime(DateTime.Now.Year, 12, 31).AddHours(24).AddSeconds(-1);

        dashboardStatics = await client.GetLatestStats();
        CompanyCodes = dashboardStatics.CompanyCodes;
        MasterStatics = await client.GetMasterStaticsEntires();

        if (MasterStatics != null && CompanyCodes.Count() > 0)
            DisplayCharts(MasterStatics, CompanyCodes[0].Trim());

    }
    private Task OnAssetChanged(string value)
    {
        selectedAssetId = value;
        // Handle asset selection change
        return Task.CompletedTask;
    }

    Random random = new Random();
    List<string> generatedColors = new List<string>();
    public string GenerateRandomColor()
    {
        string hexColor;
        do
        {
            byte[] rgb = new byte[3];
            random.NextBytes(rgb);

            hexColor = "#" + BitConverter.ToString(rgb).Replace("-", string.Empty);
        } while (generatedColors.Contains(hexColor));

        generatedColors.Add(hexColor);
        return hexColor;
    }

    public async void FilterChart()
    {
        var CompanyCode = SelectedCompany;
        CompanyStatics.Clear();
        AssetsStatics.Clear();
        EmployeeStatics.Clear();
        AllocationChartData.Clear();
        await DestroyChart("companybar");
        await DestroyChart("allocationguage");
        await DestroyChart("employeebar");
        await DestroyChart("assetbar");
        DisplayCharts(MasterStatics, CompanyCode.Trim());
        StateHasChanged();
    }

    private async Task DestroyChart(string id)
    {
        await JSRuntime.InvokeVoidAsync("window.destroyChart", id);
    }

    public void DisplayCharts(MasterStatics masterStatics, string CompanyCode)
    {
        try
        {
            #region Allocation
            var a = masterStatics.AllocationStatics.Where(c => c.CompanyCode == CompanyCode);
            foreach (var entry in masterStatics.AllocationStatics.Where(c => c.CompanyCode == CompanyCode))
            {
                if (entry != null)
                {
                    if(entry.allocation.Count()>0)
                    {
                        AllocationCompanyCode = entry.CompanyCode;
                        AllocationChartData.Add(entry.allocation.Count(o=>o.AllocationType.Equals(AllocationType.Temporary)).ToString());
                        AllocationChartData.Add(entry.allocation.Count(o=>o.AllocationType.Equals(AllocationType.Permanent)).ToString());
                        //AllocationChartData.Add(entry.TemporaryAlloction.ToString());
                        //AllocationChartData.Add(entry.PermanentAlloction.ToString());
                    }
                }
            }
          
            #endregion

            #region Company
            CompanyStaticsLabels = masterStatics.CompaniesStatics.Where(c => c.CompanyCode == CompanyCode).Select(o => o.CompanyCode).ToArray();

            CompanyStatics.Add(new ChartJsDataset
                {
                    Label = "TotalAssets",
                    Data = masterStatics.CompaniesStatics.Where(c => c.CompanyCode == CompanyCode).Select(o => o.TotalAssets.ToString()).ToArray(),
                    BackgroundColor = ColorHelper.GetBackgroundColors("#ffb1c1", masterStatics.CompaniesStatics.Count()),

                });

            CompanyStatics.Add(new ChartJsDataset
                {
                    Label = "TotalEmployees",
                    Data = masterStatics.CompaniesStatics.Where(c => c.CompanyCode == CompanyCode).Select(o => o.TotalEmployees.ToString()).ToArray(),
                    BackgroundColor = ColorHelper.GetBackgroundColors("#9ad0f5", masterStatics.CompaniesStatics.Count()),

                });

            CompanyStatics.Add(new ChartJsDataset
                {
                    Label = "TotalAllocations",
                    Data = masterStatics.CompaniesStatics.Where(c => c.CompanyCode == CompanyCode).Select(o => o.TotalAllocations.ToString()).ToArray(),
                    BackgroundColor = ColorHelper.GetBackgroundColors("#b5e48c", masterStatics.CompaniesStatics.Count()),

                });
            #endregion

            #region Asset
            AssetsStaticsLabels = masterStatics.AssetsStatics.Where(c => c.CompanyCode == CompanyCode).Select(o => o.CompanyCode).ToArray();
            AssetsStatics.Add(new ChartJsDataset
                {
                    Label = "Total Assets",
                    Data = masterStatics.AssetsStatics.Where(c => c.CompanyCode == CompanyCode).Select(o => o.TotalAssets.ToString()).ToArray(),
                    //BackgroundColor = ColorHelper.GetBackgroundColors(System.Drawing.Color.DarkBlue, MasterStatics.CompaniesStatics.Count()),
                    BackgroundColor = ColorHelper.GetBackgroundColors("#a5dfdf", masterStatics.CompaniesStatics.Count()),
                });

            AssetsStatics.Add(new ChartJsDataset
                {
                    Label = "Free Assets",
                    Data = masterStatics.AssetsStatics.Where(c => c.CompanyCode == CompanyCode).Select(o => o.FreeAssets.ToString()).ToArray(),
                    BackgroundColor = ColorHelper.GetBackgroundColors("#ccb2ff", masterStatics.CompaniesStatics.Count()),
                });

            AssetsStatics.Add(new ChartJsDataset
                {
                    Label = "Allocated Assets",
                    Data = masterStatics.AssetsStatics.Where(c => c.CompanyCode == CompanyCode).Select(o => o.AllocatedAssets.ToString()).ToArray(),
                    BackgroundColor = ColorHelper.GetBackgroundColors("#ffcf9f", masterStatics.CompaniesStatics.Count()),
                });
            AssetsStatics.Add(new ChartJsDataset
                {
                    Label = "Active Assets",
                    Data = masterStatics.AssetsStatics.Where(c => c.CompanyCode == CompanyCode).Select(o => o.ActiveAssets.ToString()).ToArray(),
                    BackgroundColor = ColorHelper.GetBackgroundColors("#afcf9f", masterStatics.CompaniesStatics.Count()),
                });
            AssetsStatics.Add(new ChartJsDataset
                {
                    Label = "Discarded Assets",
                    Data = masterStatics.AssetsStatics.Where(c => c.CompanyCode == CompanyCode).Select(o => o.DiscardedAssets.ToString()).ToArray(),
                    BackgroundColor = ColorHelper.GetBackgroundColors("#cfcf9f", masterStatics.CompaniesStatics.Count()),
                });
            #endregion

            #region Employee
            EmployeeStaticsLabels = masterStatics.EmployeeStatics.Where(c => c.CompanyCode == CompanyCode).Select(o => o.CompanyCode).ToArray();
            EmployeeStatics.Add(new ChartJsDataset
                {
                    Label = "Total Employee",
                    Data = masterStatics.EmployeeStatics.Where(c => c.CompanyCode == CompanyCode).Select(o => o.TotalEmployee.ToString()).ToArray(),
                    BackgroundColor = ColorHelper.GetBackgroundColors("#ff477e", masterStatics.CompaniesStatics.Count()),
                    Stack = "stack 0"
                });

            foreach (var data in masterStatics.EmployeeStatics.Where(c => c.CompanyCode == CompanyCode))
            {
                foreach (var d in data.EmployeeByDepartment)
                {
                    EmployeeStatics.Add(new ChartJsDataset
                        {
                            Label = d.Department,
                            Data = new[] { d.Count.ToString() },
                            BackgroundColor = ColorHelper.GetBackgroundColors(GenerateRandomColor(), data.EmployeeByDepartment.Count()),
                            Stack = "stack 1"
                        });
                }
                foreach (var s in data.EmployeeByStatus)
                {
                    EmployeeStatics.Add(new ChartJsDataset
                        {
                            Label = s.Status,
                            Data = new[] { s.Count.ToString() },
                            BackgroundColor = ColorHelper.GetBackgroundColors(GenerateRandomColor(), data.EmployeeByStatus.Count()),
                            Stack = $"stack {s.Status}"
                        });
                }
            }

            //foreach (var entry in masterStatics.AssetsStatics.Where(c => c.CompanyCode == CompanyCode))
            //{
            //    if (entry != null)
            //    {
            //        AssetChartData.Add(entry.TotalAssets.ToString());
            //        AssetChartData.Add(entry.FreeAssets.ToString());
            //        AssetChartData.Add(entry.AllocatedAssets.ToString());
            //    }
            //}
            #endregion

        }
        catch (Exception ex)
        {

        }
    }
}