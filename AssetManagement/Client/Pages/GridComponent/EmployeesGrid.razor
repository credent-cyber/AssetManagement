@using AssetManagement.Client.Client;
@using AssetManagement.Client.Pages.GridButton;
@using AssetManagement.Dto.Models;
@using GridBlazor
@using GridBlazor.Pages
@using GridShared
@using GridShared.Utility
@using Microsoft.Extensions.Primitives
@using AssetManagement.Dto
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject AppClient _appClient
@inject IJSRuntime JSRuntime


@if (_task.IsCompleted)
{
    <div class="row">
        <div class="col-sm-12">
            <GridComponent @ref="Component" T="Employee" Grid="@_grid"></GridComponent>
        </div>
    </div>
}
else
{
    <div class="loader-container mt-4">
        <div class="loader"></div>
    </div>
}

@code
{
    private CGrid<Employee> _grid;
    private Task _task;
    private static GridComponent<Employee> Component;
    static List<EmployeeFilesMapping> employeeFiles = new();
    static string BaseUri = string.Empty;
    static bool filter = true;

    Action<IGridColumnCollection<Employee>> columns = c =>
    {
        c.Add(o => o.Id).SetWidth("50px").Css("table-bordered").Titled("SN.");
        c.Add().Encoded(false).Sanitized(false).RenderValueAs(employee =>
       {
           var imageUrl = "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/default-avatar.png";
           var employeeFile = employeeFiles.FirstOrDefault(o => o.EmployeeId == employee.Id);
           if (!string.IsNullOrEmpty(employeeFile?.ProfilePhotoFile))
           {
               imageUrl = $"{BaseUri}EmployeesZone/{employeeFile?.ProfilePhotoFile}";
           }
           return $"<img src='{imageUrl}' alt='{employee.EmployeeName}' width='50' height='50' />";
       }).SetWidth("50px").Css("table-bordered").Titled("Image");
        c.Add(o => o.CompanyCode).SetWidth("50px").Css("table-bordered").Titled("Company");
        c.Add(o => o.EmployeeId).SetWidth("50px").Css("table-bordered").Titled("ID");
        c.Add(o => o.EmployeeName).Css("table-bordered").Titled("Name");
        c.Add(o => o.Status).SetWidth("50px").Css("table-bordered");
        c.Add(o => o.MobileNumber).SetWidth("50px").Css("table-bordered").Titled("Mobile");
        c.Add(o => o.EmailId).SetWidth("50px").Css("table-bordered").Titled("Email");
        c.Add(o => o.AadhaarNumber).SetWidth("50px").Css("table-bordered").Titled("Aadhaar");

        c.Add().Encoded(false).Sanitized(false).RenderComponentAs<EmployeeViewButton>().SetWidth("10px").Titled("View");
        c.Add().Encoded(false).Sanitized(false).RenderComponentAs<EmployeeEditButton>().SetWidth("10px").Titled("Edit");
        c.Add().Encoded(false).Sanitized(false).RenderComponentAs<EmployeeShareFormButton>().SetWidth("10px").Titled("Share");
        c.Add().Encoded(false).Sanitized(false).RenderComponentAs<EmployeeDeleteButton>(new List<Action<object>> { RefreshGrid }).SetWidth("10px").Titled("Delete");
    };

    protected override async Task OnParametersSetAsync()
    {
        BaseUri = NavigationManager.BaseUri;
        string url = $"odata/Employee";
        var query = new QueryDictionary<StringValues>();
        query.Add("grid-sorting", "Id__1__1");

        var client = new GridODataClient<Employee>(HttpClient, url, query, false, "EmployeeGrid", columns, 5)
            .Sortable(true)
            .Filterable(true)
            .ClearFiltersButton(true)
            .SetStriped(true)
            .WithMultipleFilters()
            .WithGridItemsCount()
            .SetExcelExport(true, true, "Employees")
            .ChangePageSize(true)
            .EmptyText("No data available")
            .SetKeyboard(true)
            //.AddButtonComponent<Employee>("EmployeeTransfer", "Employee Transfer", (MarkupString)"<a href='https://localhost:44379/'><span class='oi oi-transfer' aria-hidden='false'></span></a>")
            //.AddButtonComponent<Employee>("EmployeeTransfer", "Employee Transfer", (MarkupString)"<a href='https://localhost:44379/'><span class='oi oi-transfer' aria-hidden='false'></span></a>", "transferButton")

            .Searchable(true, false, false);

        _grid = client.Grid;
        _task = client.UpdateGrid();
        await _task;
        employeeFiles = new List<EmployeeFilesMapping>(await _appClient.GetAllEmployeeFileMap());
    }

    public static async void RefreshGrid(object item)
    {
        await Component.UpdateGrid();
    }

    public async void RefreshGrid()
    {
        await Component.UpdateGrid();
    }

    [Parameter]
    public EventCallback<Employee> EmployeeTransferClicked { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            //await JSRuntime.InvokeVoidAsync("MoveElementToClass", "EmployeeTransferButton", "grid-header-buttons");

        await base.OnAfterRenderAsync(firstRender);
    }
}