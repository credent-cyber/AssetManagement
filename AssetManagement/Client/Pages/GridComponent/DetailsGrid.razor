@using GridBlazor
@using GridBlazor.Pages
@using GridShared
@using GridShared.Utility
@using Microsoft.Extensions.Primitives
@using AssetManagement.Dto
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

@if (_task.IsCompleted)
{
    <div class="row">
        <div class="col-sm-12">
            <GridComponent T="Details" Grid="@_grid"></GridComponent>
        </div>
    </div>
}
else
{
    <div class="col-sm-12" style="margin-top:40vh">
            <div class="loading-bar"></div>
    </div>
}

@code
{
    private CGrid<Details> _grid;
    private Task _task;

    Action<IGridColumnCollection<Details>> columns = c =>
    {
        c.Add(o => o.Id).SetWidth("50px").Css("table-bordered");
        c.Add(o => o.Name).Css("table-bordered");
        c.Add(o => o.Description).Css("table-bordered");

    };

    protected override async Task OnParametersSetAsync()
    {
        string url = $"odata/Details";
        var query = new QueryDictionary<StringValues>();
        //query.Add("grid-sorting", "Id__1__1");

        var client = new GridODataClient<Details>(HttpClient, url, query, false, "ordersGrid", columns, 5)
            .Sortable(true)
            .Filterable(true)
            .ClearFiltersButton(true)
            .SetStriped(true)
            .WithMultipleFilters()
            .WithGridItemsCount()
            .SetExcelExport(true,true, "Report.xlsx")
            .ChangePageSize(true)
            .EmptyText("No data available")
            .SetKeyboard(true)
            .Searchable(true, false, false);

        _grid = client.Grid;
        _task = client.UpdateGrid();
        await _task;
    }


}