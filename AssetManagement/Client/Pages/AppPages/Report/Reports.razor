@* @page "/reports"
@page "/report/{Id:int}" *@

@using AssetManagement.Client.Client;
@using AssetManagement.Client.Pages.GridComponent
@using AssetManagement.Client.Shared.Popup
@using AssetManagement.Dto.Models;
@using System.Globalization;
@inject AppClient client
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@attribute [Authorize]

<div class="card">
    <div class="card-header" style="padding: 8px !important; display: flex; align-items: center;">
        <MudButton OnClick="GenerateReport"
                   Variant="Variant.Outlined"
                   Color="MudBlazor.Color.Tertiary"
                   Size="Size.Small"
                   Disabled=false>
            Generate Report
        </MudButton>
        <div style="margin-left: auto;">
            <ol class="breadcrumb" style="display: flex; justify-content: flex-end; align-items: center; list-style: none; padding: 0; margin: 0;">
                <li class="breadcrumb-item"><a href="/"><i class="fa fa-home" aria-hidden="true"></i></a></li>
                <li class="breadcrumb-item active">Reports</li>
            </ol>
        </div>

    </div>



    <div class="card-body">
        <ReportsGrid />
    </div>

    <ImportViewDailog Title="Generate Report" Show="show" Width="90" OnCloseDialog="CloseDailogBox">
        @if (!columnSelection)
        {
            <EditForm Model="@model" OnValidSubmit="@OnValidSubmit">
                <h6 class="text-dark text-center">Select fields to generate Report</h6>
                <hr />
                <div style="overflow:auto">
                    <div class="form-group row mb-1">
                        <label class="col-form-label col-md-3 bold-font">Company Code</label>
                        <div class="col-md-1">
                            <input class="form-check-input mt-3" type="checkbox" @bind="@model.CompanyCode" @oninput="CopyAddress">
                        </div>
                        @if (model.CompanyCode)
                        {
                            <label class="col-form-label col-md-3 bold-font">Select Company</label>
                            <div class="col-md-4">
                                <HxMultiSelect TItem="Company"
                                       AutoSort="false"
                                       TValue="string"
                                       Data="@company"
                                       @bind-Value="@model.CompanyCodeSelected"
                                       TextSelector="@(p => p.CompanyCode)"
                                       ValueSelector="@(p => p.CompanyCode)"
                                       EmptyText="- select -"
                                       NullDataText="Loading..." />
                            </div>
                        }
                    </div>
                    <div class="form-group row mb-1">
                        <label class="col-form-label col-md-3 bold-font">Asset Type</label>
                        <div class="col-md-1">
                            <input class="form-check-input mt-3" type="checkbox" @bind="@model.AssetType" @oninput="CopyAddress">
                        </div>
                        @if (model.AssetType)
                        {
                            <label class="col-form-label col-md-3 bold-font">Select AssetType</label>
                            <div class="col-md-4">
                                <HxMultiSelect TItem="AssetType"
                                       AutoSort="false"
                                       TValue="string"
                                       Data="@assetType"
                                       @bind-Value="@model.AssetTypeSelected"
                                       TextSelector="@(p => p.Name)"
                                       ValueSelector="@(p => p.Name)"
                                       EmptyText="- select -"
                                       NullDataText="Loading..." />
                            </div>
                        }
                    </div>
                    <div class="form-group row mb-1">
                        <label class="col-form-label col-md-3 bold-font">Asset Brand</label>
                        <div class="col-md-1">
                            <input class="form-check-input mt-3" type="checkbox" @bind="@model.Brand" @oninput="CopyAddress">
                        </div>
                    </div>
                    <div class="form-group row mb-1">
                        <label class="col-form-label col-md-3 bold-font">Model</label>
                        <div class="col-md-1">
                            <input class="form-check-input mt-3" type="checkbox" @bind="@model.Model" @oninput="CopyAddress">
                        </div>
                    </div>
                    <div class="form-group row mb-1">
                        <label class="col-form-label col-md-3 bold-font">EmployeeName</label>
                        <div class="col-md-1">
                            <input class="form-check-input mt-3" type="checkbox" @bind="@model.EmployeeName" @oninput="CopyAddress">
                        </div>
                    </div>
                    <div class="form-group row mb-1">
                        <label class="col-form-label col-md-3 bold-font">EmployeeEmail</label>
                        <div class="col-md-1">
                            <input class="form-check-input mt-3" type="checkbox" @bind="@model.EmployeeEmail" @oninput="CopyAddress">
                        </div>
                    </div>
                    <div class="form-group row mb-1">
                        <label class="col-form-label col-md-3 bold-font">Allocation Type</label>
                        <div class="col-md-1">
                            <input class="form-check-input mt-3" type="checkbox" @bind="@model.AllocationType" @oninput="CopyAddress">
                        </div>
                        @if (model.AllocationType)
                        {
                            <label class="col-form-label col-md-3 bold-font">Select AssetType</label>
                            <div class="col-md-4">
                                <InputSelect id="AllocationType" @bind-Value="model.AllocationTypeSelected" class="form-control">
                                    <option>Select</option>
                                    @foreach (var al in Enum.GetValues<AllocationType>())
                                    {
                                        <option value="@al">@al</option>
                                    }
                                </InputSelect>
                            </div>
                        }
                    </div>
                    <div class="form-group row mb-1">
                        <label class="col-form-label col-md-3 bold-font">Issue Date</label>
                        <div class="col-md-1">
                            <input class="form-check-input mt-3" type="checkbox" @bind="@model.IssueDate" @oninput="CallIssueDate">
                        </div>
                        @if (model.IssueDate)
                        {
                            <label class="col-form-label col-md-3 bold-font">IssueDate Range</label>
                            <div class="col-md-4">
                                <MudDateRangePicker @ref="_issueDatePicker" @bind-DateRange="_issueDate" HelperText="" DateFormat="dd/MM/yyyy" TitleDateFormat="dddd, dd. MMMM">
                                    <PickerActions Context="pickerActionsContext">
                                        <MudButton Class="mr-auto align-self-start" OnClick="@(() => _issueDatePicker.Clear())">Clear</MudButton>
                                        <MudButton OnClick="@(() => _issueDatePicker.Close(false))">Cancel</MudButton>
                                        <MudButton Color="Color.Primary" OnClick="@(() => _issueDatePicker.Close())">Ok</MudButton>
                                    </PickerActions>
                                </MudDateRangePicker>
                            </div>
                        }
                    </div>
                    <div class="form-group row mb-1">
                        <label class="col-form-label col-md-3 bold-font">Issue Till</label>
                        <div class="col-md-1">
                            <input class="form-check-input mt-3" type="checkbox" @bind="@model.IssueTill" @oninput="CallIssueTill">
                        </div>
                        @if (model.IssueTill)
                        {
                            <label class="col-form-label col-md-3 bold-font">IssueTill Range</label>
                            <div class="col-md-4">
                                <MudDateRangePicker @ref="_issueTillPicker" @bind-DateRange="_issueTill" HelperText="" DateFormat="dd/MM/yyyy" TitleDateFormat="dddd, dd. MMMM">
                                    <PickerActions Context="pickerActionsContext">
                                        <MudButton Class="mr-auto align-self-start" OnClick="@(() => _issueTillPicker.Clear())">Clear</MudButton>
                                        <MudButton OnClick="@(() => _issueTillPicker.Close(false))">Cancel</MudButton>
                                        <MudButton Color="Color.Primary" OnClick="@(() => _issueTillPicker.Close())">Ok</MudButton>
                                    </PickerActions>
                                </MudDateRangePicker>
                            </div>
                        }
                    </div>
                    <div class="form-group row mb-1">
                        <label class="col-form-label col-md-3 bold-font">Return Date</label>
                        <div class="col-md-1">
                            <input class="form-check-input mt-3" type="checkbox" @bind="@model.ReturnDate" @oninput="CallReturnDate">
                        </div>
                        @if (model.ReturnDate)
                        {
                            <label class="col-form-label col-md-3 bold-font">ReturnDate Range</label>
                            <div class="col-md-4">
                                <MudDateRangePicker Style="left: 50% !important;top: 50% !important;transform: translate(-50%, -50%);" @ref="_returnDatePicker" @bind-DateRange="_returnDate" HelperText="" DateFormat="dd/MM/yyyy" TitleDateFormat="dddd, dd. MMMM">
                                    <PickerActions Context="pickerActionsContext">
                                        <MudButton Class="mr-auto align-self-start" OnClick="@(() => _returnDatePicker.Clear())">Clear</MudButton>
                                        <MudButton OnClick="@(() => _returnDatePicker.Close(false))">Cancel</MudButton>
                                        <MudButton Color="Color.Primary" OnClick="@(() => _returnDatePicker.Close())">Ok</MudButton>
                                    </PickerActions>
                                </MudDateRangePicker>
                            </div>
                        }
                    </div>
                </div>
                <div class="fixed-div" style="text-align:center;">
                    <button type="submit" class="btn btn-success col-md-2 mr-1">Generate Report</button>
                    <button type="button" class="btn btn-danger col-md-2 mr-1" @onclick="CloseDailogBox">Close</button>
                </div>
                <br />
            </EditForm>
        }
        else
        {
            <div id="printContent" class="table-container table-responsive" style="overflow: auto;">
                <table class="table table-striped table-hover print-table">
                    <thead class="bg-secondary text-light">
                        <tr style="text-align:center">
                            <td>SN.</td>
                            @if (model.CompanyCode)
                            {
                                <td>Company Code</td>
                            }
                            @if (model.AssetType)
                            {
                                <td>Asset Type</td>
                            }
                            @if (model.Brand)
                            {
                                <td>Make </td>
                            }
                            @if (model.Model)
                            {
                                <td>Model </td>
                            }
                            @if (model.EmployeeName)
                            {
                                <td>Name </td>
                            }
                            @if (model.EmployeeEmail)
                            {
                                <td> Email</td>
                            }
                            @if (model.AllocationType)
                            {
                                <td> AllocationType</td>
                            }
                            @if (model.IssueDate)
                            {
                                <td>IssueDate </td>
                            }
                            @if (model.IssueTill)
                            {
                                <td>IssueTill </td>
                            }
                            @if (model.ReturnDate)
                            {
                                <td>ReturnDate </td>
                            }

                        </tr>
                    </thead>
                    <tbody>

                        @if (responceData?.Count == 0)
                        {
                            <tr><td colspan="3">No data found</td></tr>
                        }
                        else
                        {
                            var counter = 0;
                            foreach (var r in responceData)
                            {
                                counter++;
                                <tr>
                                    <td>@counter</td>
                                    @if (model.CompanyCode)
                                    {
                                        <td>@r.CompanyCode</td>
                                    }
                                    @if (model.AssetType)
                                    {
                                        <td>@r.AssetType</td>
                                    }
                                    @if (model.Brand)
                                    {
                                        <td>@r.AssetBrand</td>
                                    }
                                    @if (model.Model)
                                    {
                                        <td>@r.AssetModel</td>
                                    }
                                    @if (model.EmployeeName)
                                    {
                                        <td>@r.EmployeeName</td>
                                    }
                                    @if (model.EmployeeEmail)
                                    {
                                        <td>@r.EmployeeEmail</td>
                                    }
                                    @if (model.AllocationType)
                                    {
                                        <td>@r.AllocationType</td>
                                    }
                                    @if (model.IssueDate)
                                    {
                                        <td>@r.IssueDate.ToString("dd/MM/yyyy")</td>
                                    }
                                    @if (model.IssueTill)
                                    {
                                        <td>@(r.IssueTill?.ToString("dd/MM/yyyy"))</td>
                                    }
                                    @if (model.ReturnDate)
                                    {
                                        <td>@(r.ReturnDate?.ToString("dd/MM/yyyy"))</td>

                                    }
                                </tr>

                            }
                            totalItem = counter;
                        }

                    </tbody>
                </table>
            </div>
            <div class="fixed-div" style="text-align:center;">
                <i style="float:right">Total Items : @totalItem</i>
                <button type="button" @onclick="()=>columnSelection = false" class="btn btn-secondary col-md-2 mb-1 mr-1"><i class="fa fa-long-arrow-left" aria-hidden="true"></i> Back</button>
                <button type="button" @onclick="ExportExcelReport" class="btn btn-primary col-md-2 mb-1 mr-1"><i class="fa fa-table" aria-hidden="true"></i> Export</button>
                <button type="button" @onclick="PrintPDF" class="btn btn-warning col-md-2 mb-1 mr-1"><i class="fa fa-print" aria-hidden="true"></i> Print PDF</button>
            </div>
        }
    </ImportViewDailog>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private bool show = false;
    string Message = string.Empty;
    string MessageBody = "Thank you!";
    bool IsError = false;
    bool IsSuccess = false;
    bool TaskCompleted = false;
    bool Exported = false;
    int totalItem = 0;
    List<Company> company = new();
    List<AssetType> assetType = new();
    List<Asset> asset = new();
    List<Employee> employee = new();
    AllocationlogReportGenerate model = new();
    List<AllocationLog> responceData = new();

    bool columnSelection = false;
    //private DateRange _issueDate = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);
    private MudDateRangePicker _issueDatePicker;
    private MudDateRangePicker _issueTillPicker;
    private MudDateRangePicker _returnDatePicker;
    private DateRange _issueDate = new DateRange();
    private DateRange _issueTill = new DateRange();
    private DateRange _returnDate = new DateRange();
    DateTime dateTime;

    protected override async Task OnInitializedAsync()
    {
        company = new List<Company>(await client.GetAllCompany());
        assetType = new List<AssetType>(await client.GetAllAssetType());
        employee = new List<Employee>(await client.GetAllEmployee());
        asset = new List<Asset>(await client.GetAllAsset());
    }

    protected async Task OnValidSubmit()
    {

        Message = string.Empty;
        MessageBody = "Thank you!";
        IsError = false;
        IsSuccess = false;
        show = true;
        TaskCompleted = false;

        model.CompanyCodeSelected = model.CompanyCode ? model.CompanyCodeSelected : null;
        model.AssetTypeSelected = model.AssetType ? model.AssetTypeSelected : null;
        model.AllocationTypeSelected = model.AllocationType ? model.AllocationTypeSelected : null;

        if (model.IssueDate && _issueDate != null)
        {
            if (_issueDate.Start != null && _issueDate.End != null)
            {               
                CultureInfo culture = new CultureInfo("en-US");
                model.IssueDateRangeStart = Convert.ToDateTime(_issueDate.Start, culture);
                model.IssueDateRangedEnd = Convert.ToDateTime(_issueDate.End, culture).Date.AddHours(23).AddMinutes(59).AddSeconds(59);
            }
        }
        else
        {
            model.IssueDateRangeStart = new DateTime();
            model.IssueDateRangedEnd = new DateTime();
        }
        if (model.IssueTill && _issueTill != null)
        {
            if (_issueTill.Start != null && _issueTill.End != null)
            {
                CultureInfo culture = new CultureInfo("en-US");
                model.IssueTillRangeStart = Convert.ToDateTime(_issueTill.Start, culture);
                model.IssueTillRangeEnd = Convert.ToDateTime(_issueTill.End, culture).Date.AddHours(23).AddMinutes(59).AddSeconds(59);
            }
        }
        else
        {
            model.IssueTillRangeStart = new DateTime();
            model.IssueTillRangeEnd = new DateTime();
        }
        if (model.ReturnDate && _returnDate != null)
        {
            if (!_returnDate.Start.Equals(null) && _returnDate.End != null)
            {
                CultureInfo culture = new CultureInfo("en-US");
                model.ReturnDateRangeStart = Convert.ToDateTime(_returnDate.Start, culture);
                model.ReturnDateRangeEnd = Convert.ToDateTime(_returnDate.End, culture).Date.AddHours(23).AddMinutes(59).AddSeconds(59);
            }
        }
        else
        {
            model.ReturnDateRangeStart = new DateTime();
            model.ReturnDateRangeEnd = new DateTime();
        }

        responceData = new List<AllocationLog>(await client.GetFilteredAllocationlogs(model));
        if (responceData.Count() > 0)
        {
            if (model.CompanyCode && (model.CompanyCodeSelected != null || model.CompanyCodeSelected?.Count() > 0))
            {
                responceData = responceData.Where(o => model.CompanyCodeSelected?.Contains(o.CompanyCode) ?? false).ToList();
            }
            if (model.AssetType && (model.AssetTypeSelected != null || model.AssetTypeSelected?.Count() > 0))
            {
                responceData = responceData.Where(o => model.AssetTypeSelected?.Contains(o.AssetType) ?? false).ToList();
            }
            if (model.AllocationType && model.AllocationTypeSelected != null && !model.AllocationTypeSelected.Contains("Select"))
            {
                responceData = responceData.Where(o => model.AllocationTypeSelected?.Contains(o.AllocationType.ToString()) ?? false).ToList();
            }

            if (model.IssueDate && model.IssueDateRangeStart != DateTime.MinValue && model.IssueDateRangedEnd != DateTime.MinValue)
            {
                responceData = responceData.Where(o => o.IssueDate >= model.IssueDateRangeStart && o.IssueDate <= model.IssueDateRangedEnd).ToList();
            }
            if (model.IssueTill && model.IssueTillRangeStart != DateTime.MinValue && model.IssueTillRangeEnd != DateTime.MinValue)
            {
                responceData = responceData.Where(o => o.IssueTill >= model.IssueTillRangeStart && o.IssueDate <= model.IssueTillRangeEnd).ToList();
            }
            if (model.ReturnDate && model.ReturnDateRangeStart != DateTime.MinValue && model.ReturnDateRangeEnd != DateTime.MinValue)
            {
                responceData = responceData.Where(o => o.ReturnDate >= model.ReturnDateRangeStart && o.IssueDate <= model.ReturnDateRangeEnd).ToList();
            }

            columnSelection = true;
        }



        var fileName = $"allocation_log {DateTime.Now.ToString()}.xlsx";
        var mimeType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
        try
        {
            //await using (var memoryStream = new MemoryStream(excelContent))
            //{
            //    await JSRuntime.InvokeVoidAsync("downloadFile", fileName, mimeType, memoryStream.ToArray());
            //}
            //model = new();




        }
        catch (Exception ex)
        {

        }

    }

    protected async Task ExportExcelReport()
    {
        var responceData  = await client.AllocationlogExportToExcel(model);
        var fileName = $"allocation_logs {DateTime.Now.ToString()}.xlsx";
        var mimeType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";

        await using (var memoryStream = new MemoryStream(responceData))
        {
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, mimeType, memoryStream.ToArray());
        }
    }

    public void GenerateReport()
    {
        show = true;
    }

    private void CloseDailogBox()
    {
        show = false;
        IsError = false;
        Message = string.Empty;
        TaskCompleted = false;
        Exported = false;
        columnSelection = false;
        model = new();
    }

    public void CopyAddress()
    {

    }
    public void CallIssueDate()
    {
        if (model.IssueDate)
            _issueDatePicker.Clear();
    }
    public void CallIssueTill()
    {
        if (model.IssueTill)
            _issueTillPicker.Clear();
    }
    public void CallReturnDate()
    {
        if (model.ReturnDate)
            _returnDatePicker.Clear();
    }

    private async Task PrintPDF()
    {
       await JSRuntime.InvokeVoidAsync("printDiv", "printContent");    
       // await JSRuntime.InvokeVoidAsync("printInterop.printDiv", "printContent");
    }

    
}
