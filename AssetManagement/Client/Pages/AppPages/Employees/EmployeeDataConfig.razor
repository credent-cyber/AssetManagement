@page "/employee-config"
@page "/employee-config/{Id:int}"
@page "/employee-config/{Key}/{date:datetime?}"
@using AssetManagement.Client.Client;
@using AssetManagement.Client.Pages.AppPages.Employees.Component
@using AssetManagement.Client.Shared.Popup
@using AssetManagement.Dto.Models
@using AssetManagement.Dto;
@using System.Text.Json;
@using System.Text.RegularExpressions;
@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor
@inject AppClient client
@inject HttpClient _httpClient
@inject ILogger<EmployeeDataConfig> logger
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager
@attribute [Authorize]
@inject IDialogService Dialog

<style>

    .name-column {
        width: 200px;
    }

    @@media (max-width: 768px) {
        .name-column {
            width: 150px;
        }

        .table-responsive {
            overflow-x: auto;
            -webkit-overflow-scrolling: touch;
        }
    }

</style>
<div>
    <div class="card mb-4">
        <div class="card-header bg-secondary text-center">
            @Title
        </div>
        <div class="card-body">
            @if (Onload)
            {
                <div class="loader-container mt-4">
                    <div class="loader"></div>
                </div>
            }
            else
            {
                <EditForm Model="@model" OnValidSubmit="@OnValidSubmit">
                    <DataAnnotationsValidator />
                    @* <ValidationSummary /> *@
                    <div class="form-group row mb-2">
                        <label class="col-form-label col-md-2 bold-font required-field">Company Code</label>
                        <div class="col-md-2">
                            <InputSelect id="CompanyCode" @bind-Value="model.CompanyCode" class="form-control" disabled="@(model.Id > 0)" @onclick="GetEmployeeId">
                                <option selected>- Select -</option>
                                @foreach (var c in company.ToList())
                                {
                                    <option value="@c.CompanyCode">@c.CompanyCode</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="() => model.CompanyCode" />
                        </div>

                        <label class="col-form-label col-md-2 bold-font required-field">Employee Id</label>
                        <div class="col-md-2">
                            <InputText id="EmployeeId" @bind-Value="model.EmployeeId" class="form-control" />
                            <ValidationMessage For="() => model.EmployeeId" />
                        </div>

                        <label class="col-form-label col-md-1 bold-font required-field">Name</label>
                        <div class="col-md-3">
                            <InputText id="EmployeeName" @bind-Value="model.EmployeeName" class="form-control" />
                            <ValidationMessage For="() => model.EmployeeName" />
                        </div>
                    </div>

                    <div class="form-group row mb-2">
                        <label class="col-form-label col-md-2 bold-font required-field">Employee Status</label>
                        <div class="col-md-2">
                            <InputSelect id="Status" @bind-Value="model.Status" class="form-control">
                                @foreach (var s in Enum.GetValues(typeof(EmployeeStatus)))
                                {
                                    <option value="@s">@s</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="() => model.Status" />
                        </div>

                        <label class="col-form-label col-md-2 bold-font required-field">Father's Name</label>
                        <div class="col-md-2">
                            <InputText id="fatherName" @bind-Value="model.fatherName" class="form-control" />
                            <ValidationMessage For="() => model.fatherName" />
                        </div>
                        <label class="col-form-label col-md-1 bold-font">UAN No</label>
                        <div class="col-md-3">
                            <InputText id="UANNo" @bind-Value="model.UANNo" class="form-control" />
                            <ValidationMessage For="() => model.UANNo" />
                        </div>
                    </div>

                    <div class="form-group row mb-2">
                        <label class="col-form-label col-md-2 bold-font required-field">Email</label>
                        <div class="col-md-6">
                            <InputText id="EmailId" @bind-Value="model.EmailId" class="form-control" />
                            <ValidationMessage For="() => model.EmailId" />
                        </div>
                        <div class="col-md-1"></div>
                        <div class="col-md-3">
                            <button type="button" style="width:100%" @onclick="()=>EmailRequest = !EmailRequest" class="btn btn-primary">Create Email Request</button>
                        </div>
                    </div>

                    <div class="form-group row mb-2">
                        <label class="col-form-label col-md-2 bold-font">Emergency Number</label>
                        <div class="col-md-2">
                            <InputText id="EmergencyContactNumber" @bind-Value="model.EmergencyContactNumber" class="form-control" />
                            <ValidationMessage For="() => model.EmergencyContactNumber" />
                        </div>

                        <label class="col-form-label col-md-2 bold-font required-field">Date of join</label>
                        <div class="col-md-2">
                            <InputDate id="DateOfJoin" @bind-Value="model.DateOfJoin" class="form-control" />
                            <ValidationMessage For="() => model.DateOfJoin" />
                        </div>

                        <label class="col-form-label col-md-1 bold-font required-field">Mobile</label>
                        <div class="col-md-3">
                            <InputText id="MobileNumber" @bind-Value="model.MobileNumber" class="form-control" />
                            <ValidationMessage For="() => model.MobileNumber" />
                        </div>
                    </div>

                    <div class="form-group row mb-2">
                        <label class="col-form-label col-md-2 bold-font required-field">Date Of Birth</label>
                        <div class="col-md-2">
                            <InputDate id="DateOfBirth" @bind-Value="model.DateOfBirth" class="form-control" />
                            <ValidationMessage For="() => model.DateOfBirth" />
                        </div>

                        <label class="col-form-label col-md-2 bold-font required-field">Aadhar No</label>
                        <div class="col-md-2">
                            <InputText id="AadhaarNumber" @bind-Value="model.AadhaarNumber" class="form-control" />
                            <ValidationMessage For="() => model.AadhaarNumber" />
                        </div>

                        <label class="col-form-label col-md-1 bold-font">PAN No</label>
                        <div class="col-md-3">
                            <InputText id="PANNumber" @bind-Value="model.PANNumber" class="form-control" />
                            <ValidationMessage For="() => model.PANNumber" />
                        </div>

                    </div>

                    <div class="form-group row mb-2">
                        <label class="col-form-label col-md-2 bold-font required-field">Reporting To</label>
                        <div class="col-md-4">
                            <MudGrid>
                                <MudItem xs="12" sm="12" md="12">
                                    <MudAutocomplete Label="Select" T="Employee" @bind-Value="selectedManager" SearchFunc="@ManagerSearch" Variant="Variant.Outlined" Margin="Margin.Dense"
                                                     ToStringFunc="@(e => e == null ? null : $"{e.EmployeeName} ({e.EmailId})")"
                                                     Required="false"
                                                     ResetValueOnEmptyText="true"
                                                     CoerceText="true"
                                                     CoerceValue="true"
                                                     MaxItems="null">

                                    </MudAutocomplete>
                                </MudItem>
                            </MudGrid>
                            @if (selectedManager != null) { model.ReportingTo = selectedManager.ReportingTo; }
                            <ValidationMessage For="() => model.ReportingTo" />
                        </div>

                        <label class="col-form-label col-md-2 bold-font required-field">Designation</label>
                        <div class="col-md-3">
                            <MudGrid>
                                <MudItem xs="12" sm="12" md="12">
                                    <MudAutocomplete Label="Select" T="DesignationDTO" @bind-Value="selectedDesigantion" SearchFunc="@DesignationSearch" Variant="Variant.Outlined" Margin="Margin.Dense"
                                                     ToStringFunc="@(e => e == null ? null : $"{e.Designation}")"
                                                     Required="false"
                                                     ResetValueOnEmptyText="true"
                                                     CoerceText="true"
                                                     CoerceValue="true"
                                                     MaxItems="null">

                                    </MudAutocomplete>
                                </MudItem>
                            </MudGrid>
                            @if (selectedDesigantion != null) { model.Designation = selectedDesigantion.Designation; }
                            <ValidationMessage For="() => model.Designation" />
                        </div>
                        <div class="col-md-1">
                            <a type="button" class="btn btn-primary" @onclick="(() => AddDesigntions = true)" style="margin-top:5px;">Add</a>
                        </div>
                    </div>

                    <div class="form-group row mb-2">
                        <label class="col-form-label col-md-2 bold-font">Qualification</label>
                        <div class="col-md-2">
                            <InputSelect id="EmployeeEducation" @bind-Value="model.EmployeeEducation" class="form-control">
                                <option>- Select -</option>
                                <option value="Graduate">Graduate</option>
                                <option value="Postgraduate">Postgraduate</option>
                                <option value="Undergraduate">Undergraduate</option>
                            </InputSelect>
                            <ValidationMessage For="() => model.EmployeeEducation" />
                        </div>

                        <label class="col-form-label col-md-2 bold-font">Education Details</label>
                        <div class="col-md-6">
                            <InputTextArea id="EmployeeEducationDetails" @bind-Value="model.EmployeeEducationDetails" class="form-control" />
                            <ValidationMessage For="() => model.EmployeeEducationDetails" />
                        </div>
                    </div>
                    <div class="form-group row mb-2">
                        <label class="col-form-label col-md-2 bold-font">EmployeeCategory</label>
                        <div class="col-md-2">
                            <InputSelect id="EmployeeCategory" @bind-Value="model.EmployeeCategory" class="form-control">
                                <option>- Select -</option>
                                <option value="L1">L1</option>
                                <option value="L2">L2</option>
                                <option value="L3">L3</option>
                                <option value="L4">L4</option>
                                <option value="L5">L5</option>
                            </InputSelect>
                            <ValidationMessage For="() => model.EmployeeCategory" />
                        </div>
                        <label class="col-form-label col-md-2 bold-font">Department</label>
                        <div class="col-md-6">
                            <InputSelect id="Department" @bind-Value="model.Department" class="form-control">
                                <option>- Select -</option>
                                @foreach (var d in Enum.GetValues(typeof(Departments)))
                                {
                                    <option value="@d">@d</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="() => model.EmployeeCategory" />
                        </div>
                    </div>
                    <div class="form-group row mb-2">
                        <label class="col-form-label col-md-2 bold-font">External Email</label>
                        <div class="col-md-4">
                            <InputText id="ExternalEmailId" @bind-Value="model.ExternalEmailId" class="form-control" />
                            <ValidationMessage For="() => model.ExternalEmailId" />
                        </div>
                        @if (model.Status.Equals(EmployeeStatus.Resigned))
                        {
                            <label class="col-form-label col-md-2 bold-font">Resigned Date</label>
                            <div class="col-md-4">
                                @*<InputDate id="DateOfLeaving" @bind-Value="model.DateOfLeaving" class="form-control" />*@
                                <input type="date" id="DateOfLeaving" name="DateOfLeaving" @bind="model.DateOfLeaving" min=@model.DateOfJoin.AddDays(1).Date.ToString("yyyy-MM-dd") class="form-control">
                                <ValidationMessage For="() => model.DateOfLeaving" />
                            </div>
                        }

                    </div>
                    <div class="form-group row mb-2">
                        <label class="col-form-label col-md-2 bold-font">Skills</label>
                        <div class="col-md-8">
                            <HxMultiSelect TItem="EmployeeSkills"
                                           AutoSort="false"
                                           TValue="int"
                                           Data="@SkillOptions"
                                           @bind-Value="@SelectedSkill"
                                           TextSelector="@(p => p.Skill)"
                                           ValueSelector="@(p => p.Id)"
                                           EmptyText="- select -"
                                           NullDataText="Loading..." />
                        </div>

                        <div class="col-md-2 col-sm-12">
                            <a class="btn btn-primary" style="width: 100%;" @onclick="(() => AddSkill = true)"><i class="fa fa-free-code-camp" aria-hidden="true"></i> Add Skills</a>
                        </div>
                    </div>

                    <div class="form-group row mb-2">
                        <label class="col-form-label col-md-2 bold-font">Other Skill's</label>
                        <div class="col-md-10">
                            <InputTextArea id="OtherSkills" @bind-Value="model.OtherSkills" class="form-control" />
                            <ValidationMessage For="() => model.OtherSkills" />
                        </div>
                    </div>

                    <div class="form-group row mb-2">
                        <label class="col-form-label col-md-2 bold-font">Upload Aadhaar</label>
                        <div class="col-md-4">
                            <div class="input-group">
                                <InputFile id="aadharfile" OnChange="@LoadAadhaarFiles" class="form-control" accept=".pdf, image/jpeg, image/jpg, image/png" />
                                <div class="input-group-append">
                                    <span class="input-group-text" style="height:100%">
                                        @if (aadhaarFile == null && AdharView == string.Empty)
                                        {
                                            <i class="fa fa-exclamation-circle" aria-hidden="true" title="No file to preview"></i>
                                        }
                                        else if ((model.Id > 0 || Key != null) && AdharView != string.Empty)
                                        {
                                            if (IsImageFile(filePath))
                                            {
                                                <a @onclick="()=>{ShowPreview = true; filePath = Uri.EscapeUriString(AdharView);}"><i class="fa fa-file text-warning" style="cursor: pointer" aria-hidden="true" title="View"></i></a>
                                            }
                                            else
                                            {

                                                <a href="@Uri.EscapeUriString(AdharView)" target="_blank" rel="noopener noreferrer"> <i class="fa fa-file text-warning" style="cursor: pointer" aria-hidden="true" title="View"></i> </a>
                                            }
                                        }
                                        else
                                        {
                                            <i class="fa fa-check text-success" title="Selected"></i>
                                        }
                                    </span>
                                </div>
                            </div>
                            <p class="text-primary">Max allowed file size 2Mb</p>
                            <p class="text-danger" style="margin-top: -18px;">@SizeLimitInfoAadhar</p>
                        </div>

                        <label class="col-form-label col-md-2 bold-font">Upload PAN Card</label>
                        <div class="col-md-4">
                            <div class="input-group">
                                <InputFile id="panfile" OnChange="@LoadPanFiles" class="form-control" accept=".pdf, image/jpeg, image/jpg, image/png" />
                                <div class="input-group-append">
                                    <span class="input-group-text" style="height:100%">
                                        @if (panCardFile == null && PanView == string.Empty)
                                        {
                                            <i class="fa fa-exclamation-circle" aria-hidden="true" title="No file to preview"></i>
                                        }
                                        else if ((model.Id > 0 || Key != null) && PanView != string.Empty)
                                        {
                                            if (IsImageFile(filePath))
                                            {
                                                <a @onclick="()=>{ShowPreview = true; filePath = Uri.EscapeUriString(PanView);}"><i class="fa fa-file text-warning" style="cursor: pointer" aria-hidden="true" title="View"></i></a>
                                            }
                                            else
                                            {

                                                <a href="@Uri.EscapeUriString(PanView)" target="_blank" rel="noopener noreferrer"> <i class="fa fa-file text-warning" style="cursor: pointer" aria-hidden="true" title="View"></i> </a>
                                            }
                                        }
                                        else
                                        {
                                            <i class="fa fa-check text-success" title="Selected"></i>
                                        }
                                    </span>
                                </div>
                            </div>
                            <p class="text-primary">Max allowed file size 2Mb</p>
                            <p class="text-danger" style="margin-top: -18px;">@SizeLimitInfoPan</p>
                        </div>
                    </div>

                    <div class="form-group row mb-2">
                        <label class="col-form-label col-md-2 bold-font">Check/Passbook</label>
                        <div class="col-md-4">
                            <div class="input-group">
                                <InputFile id="aadharfile" OnChange="@LoadBankFiles" class="form-control" accept=".pdf, image/jpeg, image/jpg, image/png" />
                                <div class="input-group-append">
                                    <span class="input-group-text" style="height:100%">
                                        @if (bankPassbookFile == null && BankPassView == string.Empty)
                                        {
                                            <i class="fa fa-exclamation-circle" aria-hidden="true" title="No file to preview"></i>
                                        }
                                        else if ((model.Id > 0 || Key != null) && BankPassView != string.Empty)
                                        {

                                            if (IsImageFile(filePath))
                                            {
                                                <a @onclick="()=>{ShowPreview = true; filePath = Uri.EscapeUriString(BankPassView);}"><i class="fa fa-file text-warning" style="cursor: pointer" aria-hidden="true" title="View"></i></a>
                                            }
                                            else
                                            {

                                                <a href="@Uri.EscapeUriString(BankPassView)" target="_blank" rel="noopener noreferrer"> <i class="fa fa-file text-warning" style="cursor: pointer" aria-hidden="true" title="View"></i> </a>
                                            }
                                        }
                                        else
                                        {
                                            <i class="fa fa-check text-success" title="Selected"></i>
                                        }
                                    </span>
                                </div>
                            </div>
                            <p class="text-primary"> Max allowed file size 2Mb</p>
                            <p class="text-danger" style="margin-top:-18px;"> @SizeLimitInfoPassbook</p>
                        </div>

                        <label class="col-form-label col-md-2 bold-font">Certi./Marksheet</label>
                        <div class="col-md-4">
                            <div class="input-group">
                                <InputFile id="panfile" OnChange="@LoadCertificateFiles" class="form-control" accept=".pdf, image/jpeg, image/jpg, image/png" />
                                <div class="input-group-append">
                                    <span class="input-group-text" style="height:100%">
                                        @if (certificateFiles == null && CertificateView == string.Empty)
                                        {
                                            <i class="fa fa-exclamation-circle" aria-hidden="true" title="No file to preview"></i>
                                        }
                                        else if ((model.Id > 0 || Key != null) && CertificateView != string.Empty)
                                        {
                                            if (IsImageFile(filePath))
                                            {
                                                <a @onclick="()=>{ShowPreview = true; filePath = Uri.EscapeUriString(CertificateView);}"><i class="fa fa-file text-warning" style="cursor: pointer" aria-hidden="true" title="View"></i></a>
                                            }
                                            else
                                            {

                                                <a href="@Uri.EscapeUriString(CertificateView)" target="_blank" rel="noopener noreferrer"> <i class="fa fa-file text-warning" style="cursor: pointer" aria-hidden="true" title="View"></i> </a>
                                            }

                                        }
                                        else
                                        {
                                            <i class="fa fa-check text-success" title="Selected"></i>
                                        }
                                    </span>
                                </div>
                            </div>
                            <p class="text-primary"> Max allowed file size 2Mb</p>
                            <p class="text-danger" style="margin-top:-18px;"> @SizeLimitInfoCertificate</p>
                        </div>
                    </div>

                    <div class="form-group row mb-2">
                        <label class="col-form-label col-md-2 bold-font">Upload Profile Pic</label>
                        <div class="col-md-4">
                            <div class="input-group">
                                <InputFile id="ProfilePicfile" OnChange="@LoademployeeProfilePhoto" class="form-control" accept="image/jpeg, image/jpg, image/png" />
                                <div class="input-group-append">
                                    <span class="input-group-text" style="height:100%">
                                        @if (employeeProfilePhoto == null && ProfilePicView == string.Empty)
                                        {
                                            <i class="fa fa-exclamation-circle" aria-hidden="true" title="No file to preview"></i>
                                        }
                                        else if ((model.Id > 0 || Key != null) && ProfilePicView != string.Empty)
                                        {


                                            if (IsImageFile(filePath))
                                            {
                                                <a @onclick="()=>{ShowPreview = true; filePath = Uri.EscapeUriString(ProfilePicView);}"><i class="fa fa-file text-warning" style="cursor: pointer" aria-hidden="true" title="View"></i></a>
                                            }
                                            else
                                            {

                                                <a href="@Uri.EscapeUriString(ProfilePicView)" target="_blank" rel="noopener noreferrer"> <i class="fa fa-file text-warning" style="cursor: pointer" aria-hidden="true" title="View"></i> </a>
                                            }
                                        }
                                        else
                                        {
                                            <i class="fa fa-check text-success" title="Selected"></i>
                                        }
                                    </span>
                                </div>
                            </div>
                            <p class="text-primary"> Max allowed file size 2Mb</p>
                            <p class="text-danger" style="margin-top:-18px;"> @SizeLimitInfoProfilePic</p>
                        </div>
                    </div>

                    <MudExpansionPanels MultiExpansion="true">
                        <MudExpansionPanel Text=" Permanent Address Details" MaxHeight="500">
                            <div class="form-group row">
                                <label class="col-form-label col-md-2 bold-font required-field">Address</label>
                                <div class="col-md-10 mb-2">
                                    <InputText id="PermanentAddress" @bind-Value="model.PermanentAddress" class="form-control" />
                                    <ValidationMessage For="() => model.PermanentAddress" />
                                </div>

                                <label class="col-form-label col-md-2 bold-font required-field">State</label>
                                <div class="col-md-2">
                                    <InputText id="PState" @bind-Value="model.PState" class="form-control" />
                                    <ValidationMessage For="() => model.PState" />
                                </div>

                                <label class="col-form-label col-md-2 bold-font required-field">Country</label>
                                <div class="col-md-2">
                                    <InputText id="PCountry" @bind-Value="model.PCountry" class="form-control" />
                                    <ValidationMessage For="() => model.PCountry" />
                                </div>

                                <label class="col-form-label col-md-2 bold-font required-field">PIN Code</label>
                                <div class="col-md-2">
                                    <InputText id="PPin" @bind-Value="model.PPin" class="form-control" />
                                    <ValidationMessage For="() => model.PPin" />
                                </div>
                            </div>
                        </MudExpansionPanel>
                        <MudExpansionPanel Text="Current Address Details" MaxHeight="500">
                            <div class="form-group row mb-2">
                                <label class="col-form-label col-md-5 bold-font">Check if Current Address is same As Permanent Address</label>
                                <div class="col-md-1">
                                    <input class="form-check-input mt-3" type="checkbox" @bind="@model.checkbox" @oninput="CopyAddress">
                                </div>
                            </div>
                            <div class="form-group row">
                                <label class="col-form-label col-md-2 bold-font ">Address</label>
                                <div class="col-md-10 mb-2">
                                    <InputText id="CurrentAddress" @bind-Value="model.CurrentAddress" class="form-control" />
                                    <ValidationMessage For="() => model.CurrentAddress" />
                                </div>

                                <label class="col-form-label col-md-2 bold-font ">State</label>
                                <div class="col-md-2">
                                    <InputText id="CState" @bind-Value="model.CState" class="form-control" />
                                    <ValidationMessage For="() => model.CState" />
                                </div>

                                <label class="col-form-label col-md-2 bold-font ">Country</label>
                                <div class="col-md-2">
                                    <InputText id="CCountry" @bind-Value="model.CCountry" class="form-control" />
                                    <ValidationMessage For="() => model.CCountry" />
                                </div>

                                <label class="col-form-label col-md-2 bold-font ">PIN Code</label>
                                <div class="col-md-2">
                                    <InputText id="PPin" @bind-Value="model.CPin" class="form-control" />
                                    <ValidationMessage For="() => model.CPin" />
                                </div>
                            </div>
                        </MudExpansionPanel>
                        <MudExpansionPanel Text="Bank Details" MaxHeight="500" Class="custom-header">
                            <div class="form-group row">
                                <label class="col-form-label col-md-2 bold-font required-field">Bank Name</label>
                                <div class="col-md-10 mb-2">
                                    <InputText id="EmpBankName" @bind-Value="model.EmpBankName" class="form-control" />
                                    <ValidationMessage For="() => model.EmpBankName" />
                                </div>

                                <label class="col-form-label col-md-2 bold-font">Account Name</label>
                                <div class="col-md-2">
                                    <InputText id="PPin" @bind-Value="model.EmpAccountName" class="form-control" />
                                    <ValidationMessage For="() => model.EmpAccountName" />
                                </div>

                                <label class="col-form-label col-md-2 bold-font required-field">Account Number</label>
                                <div class="col-md-2">
                                    <InputText id="EmpBankAccNumber" @bind-Value="model.EmpBankAccNumber" class="form-control" />
                                    <ValidationMessage For="() => model.EmpBankAccNumber" />
                                </div>

                                <label class="col-form-label col-md-2 bold-font required-field">IFSC Code</label>
                                <div class="col-md-2">
                                    <InputText id="EmpBankIfsc" @bind-Value="model.EmpBankIfsc" class="form-control" />
                                    <ValidationMessage For="() => model.EmpBankIfsc" />
                                </div>
                            </div>
                        </MudExpansionPanel>

                        <MudExpansionPanel Text="Insurance" MaxHeight="500" Class="custom-header">
                            <div class="table-responsive">
                                <table class="table table-striped table-bordered" style="margin-bottom: 0.2rem !important;">
                                    <thead style="text-align:center">
                                        <tr>
                                            <th style="width: 50px;">SN</th>
                                            <th class="name-column">Name</th>
                                            <th style="width: 100px;">Relation</th>
                                            <th style="width: 100px;">DOB</th>
                                            <th style="width: 150px;">Aadhaar</th>
                                            <th style="width: 80px;">Age</th>
                                            <th style="width: 60px;">
                                                <a title="Add Row" style="cursor:pointer; color:darkblue" @onclick="AddEmployeeInsurance">
                                                    <i class="fa fa-plus-circle fa-2x" aria-hidden="true"></i>
                                                </a>
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var e in EmployeeInsurance.Select((value, index) => new { value, index }))
                                        {
                                            <tr>
                                                <td>@(e.index + 1)</td>
                                                <td><input type="text" class="form-control" @bind="@e.value.Name" /></td>
                                                <td>
                                                    <select class="form-control" @bind="@e.value.Relation">
                                                        @foreach (var relation in Enum.GetValues(typeof(Relation)).Cast<Relation>())
                                                        {
                                                            <option value="@relation">@relation</option>
                                                        }
                                                    </select>
                                                </td>
                                                <td><input type="date" class="form-control" @bind="@e.value.DOB" /></td>
                                                <td><input type="text" class="form-control" @bind="@e.value.Aadhaar" /></td>
                                                <td>
                                                    <input type="text" class="form-control" value="@(CalculateAge(e.value.DOB))" readonly />
                                                </td>
                                                <td style="text-align:center">
                                                    <a title="Remove Row" style="cursor:pointer;" @onclick="() => RemoveEmployeeInsurance(e.value)">
                                                        <i class="fa fa-trash fa-2x text-danger" aria-hidden="true"></i>
                                                    </a>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </MudExpansionPanel>

                        <MudExpansionPanel Text="Permission" MaxHeight="500" Class="custom-header" IsExpanded="true">
                            <span class="bold-font">Sharepoint Sync is @(model.SharepointSync ? "On" : "Off")</span>
                            <MudToggleIconButton @bind-Toggled="@model.SharepointSync"
                                                 Icon="@Icons.Material.Filled.AlarmOff" Color="@Color.Error" title=@(@model.SharepointSync ? "On" : "Off")
                                                 ToggledIcon="@Icons.Material.Filled.AlarmOn" ToggledColor="@Color.Success" />
                            <div class="form-group row">
                                <label class="col-form-label col-md-1 bold-font">Portal</label>
                                <div class="col-md-1 mb-2">
                                    <input type="checkbox" @bind="model.SharepointPortal" class="form-check-input mt-2" />
                                </div>
                            </div>
                            @if (model.SharepointPortal == true)
                            {
                                model.LM = true;
                                model.EMS = true;
                            }
                            else
                            {
                                model.LM = false;
                                model.EMS = false;
                            }
                            <div class="form-group row">
                                <label class="col-form-label col-md-1 bold-font required-field">EMS</label>
                                <div class="col-md-1 mb-2">
                                    <input type="checkbox" @bind="model.EMS" class="form-check-input mt-2" disabled />
                                </div>
                                @if (model.EMS)
                                {
                                    <div class="col-md-3 mb-2" style="margin-top:-3px">
                                        <MudGrid>
                                            <MudItem xs="12" sm="6" md="12">
                                                <MudAutocomplete T="Employee" Label="Select Manager" @bind-Value="selectedEMS" SearchFunc="@EmsSearch" Variant="Variant.Outlined" Margin="Margin.Dense"
                                                                 ToStringFunc="@(e => e == null ? null : $"{e.EmployeeName} - {e.CompanyCode}")"
                                                                 Required="false"
                                                                 ResetValueOnEmptyText="true"
                                                                 CoerceText="true"
                                                                 CoerceValue="true"
                                                                 MaxItems="null">
                                                </MudAutocomplete>
                                            </MudItem>
                                        </MudGrid>
                                        @if (selectedEMS != null) { model.EmsManagerEmpId = selectedEMS.EmployeeId; model.EmsManagerEmail = selectedEMS.EmailId; }
                                        else
                                        {
                                            if (submit)
                                            {
                                                <p style="color:red">Please select email</p>
                                            }
                                        }
                                    </div>
                                    <div class="col-md-3 mb-2">
                                        <InputText id="EmsManagerEmpId" @bind-Value="model.EmsManagerEmpId" class="form-control" disabled placeholder="Manager EmployeeID" />
                                        <ValidationMessage For="() => model.EmsManagerEmpId" />
                                    </div>
                                    <div class="col-md-4 mb-2">
                                        <InputText id="EmsManagerEmail" @bind-Value="model.EmsManagerEmail" class="form-control" disabled placeholder="Manager Email" />
                                    </div>
                                }
                            </div>
                            <div class="form-group row">
                                <label class="col-form-label col-md-1 bold-font required-field">LM</label>
                                <div class="col-md-1 mb-2">
                                    <input type="checkbox" @bind="model.LM" class="form-check-input mt-2" disabled />
                                </div>
                                @if (model.LM)
                                {
                                    <div class="col-md-3 mb-2" style="margin-top:-3px">
                                        <MudGrid>
                                            <MudItem xs="12" sm="6" md="12">
                                                <MudAutocomplete T="Employee" Label="Select Manager" @bind-Value="selectedLM" SearchFunc="@EmsSearch" Variant="Variant.Outlined" Margin="Margin.Dense"
                                                                 ToStringFunc="@(e => e == null ? null : $"{e.EmployeeName} - {e.CompanyCode}")"
                                                                 Required="false"
                                                                 ResetValueOnEmptyText="true"
                                                                 CoerceText="true"
                                                                 CoerceValue="true"
                                                                 MaxItems="null">
                                                </MudAutocomplete>
                                            </MudItem>
                                        </MudGrid>
                                        @if (selectedLM != null) { model.LmManagerEmpId = selectedLM.EmployeeId; model.LmManagerEmail = selectedLM.EmailId; }
                                        else
                                        {
                                            if (submit)
                                            {
                                                <p style="color:red">Please select email</p>
                                            }
                                        }
                                    </div>
                                    <div class="col-md-3 mb-2">
                                        <InputText id="EmpBankIfsc" @bind-Value="model.LmManagerEmpId" class="form-control" disabled placeholder="Manager EmployeeID" />
                                        <ValidationMessage For="() => model.LmManagerEmpId" />
                                    </div>
                                    <div class="col-md-4 mb-2">
                                        <InputText id="EmpBankIfsc" @bind-Value="model.LmManagerEmail" class="form-control" disabled placeholder="Manager Email" />
                                    </div>
                                }
                            </div>
                            <div class="form-group row">
                                <label class="col-form-label col-md-1 bold-font">CMS</label>
                                <div class="col-md-1 mb-2">
                                    <input type="checkbox" @bind="model.CMS" class="form-check-input mt-2" />
                                </div>
                            </div>

                        </MudExpansionPanel>
                    </MudExpansionPanels>


                    <div style="text-align:center;" class="mt-4">
                        <button type="submit" class="btn btn-success col-md-2">Submit</button>
                        <button type="button" class="btn btn-danger col-md-2" @onclick="OnClose">Close</button>
                    </div>
                </EditForm>
            }
            <Dailog Title="@Message" Show="@show" OnCloseDialog="ResetForm">
                @if (show)
                {
                    @if (TaskCompleted)
                    {
                        <div style="text-align:center;">
                            @MessageBody
                        </div>
                    }
                    else
                    {
                        <div style="text-align:center">
                            <div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
                        </div>
                    }
                }
            </Dailog>
            <PageDialog Title="Add Skills" Show="AddSkill" ClosePageDialog="ClosePopUp">
                <AddSkillComponent />
            </PageDialog>

            <PageDialog Title="Add Designtions" Show="AddDesigntions" ClosePageDialog="ClosePopUp">
                <AddDesignationComponent OnSaveDesignation="HandleSaveDesignation" />
            </PageDialog>

            <FilePreviewDailog Title="Preview" Show="ShowPreview" ClosePreview="ClosePreview">
                <div style="width: 100%; overflow: auto;">
                    @if (IsImageFile(filePath))
                    {
                        <ZoomableImageComponent ImageUrlPath="@filePath"
                                                ImageWidthInPx="400"
                                                ImageHeightInPx="400"
                                                ShowResetButton="true"
                                                DefaultScaleBy="0.1f" />
                    }
                    else
                    {
                        @* <iframe src="@filePath" style="height:400px; width:100%"></iframe> *@
                        @* <a href="@filePath" target="_blank" rel="noopener noreferrer">Open PDF</a> *@
                    }

                </div>
            </FilePreviewDailog>


        </div>
    </div>

</div>

@code {

    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public string Key { get; set; }
    [Parameter]
    public DateTime date { get; set; }

    bool Onload = false;
    bool EmailRequest = false;
    private IEnumerable<dynamic> listItems;
    bool submit = false;
    private DesignationDTO? selectedDesigantion { get; set; }
    private Employee? selectedManager { get; set; }

    private bool IsImageFile(string filePath)
    {
        string[] imageExtensions = { ".jpg", ".jpeg", ".png", ".gif", ".bmp" }; // Add more extensions if needed

        string extension = System.IO.Path.GetExtension(filePath);
        return imageExtensions.Contains(extension, StringComparer.OrdinalIgnoreCase);
    }

    private async void HandleSaveDesignation(List<DesignationDTO> designations)
    {
        designation = new List<DesignationDTO>(await client.GetAllDesignations());
    }

    public string Title
    {
        get
        {
            return model?.Id > 0 ? "Modify Employee Data" : "Add Employee Data";
        }
    }

    string filePath = string.Empty;
    public bool AddSkill = false;
    public bool AddDesigntions = false;
    public bool ShowPreview = false;
    Dictionary<int, List<int>> EmployeeSkillIds = new Dictionary<int, List<int>>();
    private List<int> SelectedSkill { get; set; } = new();
    private bool show = false;


    string SizeLimitInfoAadhar = string.Empty;
    string SizeLimitInfoPan = string.Empty;
    string SizeLimitInfoPassbook = string.Empty;
    string SizeLimitInfoCertificate = string.Empty;
    string SizeLimitInfoProfilePic = string.Empty;

    string Message = string.Empty;
    string MessageBody = "Thank you!";
    bool IsError = false;
    bool IsSuccess = false;
    bool TaskCompleted = false;
    Employee model = new();
    List<Company> company = new();
    List<DesignationDTO> designation = new();
    List<EmployeeSkills> SkillOptions = new();
    List<Employee> employee = new();
    EmployeeFilesMapping employeeFiles = new();

    EmployeeOnboardingDto employeeOnboardingDto = new();

    private IBrowserFile? aadhaarFile;
    private IBrowserFile? panCardFile;
    private IBrowserFile? bankPassbookFile;
    private IBrowserFile? certificateFiles;
    private IBrowserFile? employeeProfilePhoto;


    public List<EmployeeInsurance> EmployeeInsurance { get; set; } = new List<EmployeeInsurance>();
    int SN = 0;
    private void AddEmployeeInsurance()
    {
        EmployeeInsurance.Add(new EmployeeInsurance());
    }

    private void RemoveEmployeeInsurance(EmployeeInsurance e)
    {
        EmployeeInsurance.Remove(e);
    }

    private int CalculateAge(DateTime dob)
    {
        var today = DateTime.Today;
        var age = today.Year - dob.Year;
        if (dob.Date > today.AddYears(-age)) age--;
        return age;
    }

    private async Task LoadAadhaarFiles(InputFileChangeEventArgs e)
    {
        SizeLimitInfoAadhar = string.Empty;
        //if(e.File.Size > 2097152)
        if (e.File.Size > FileSizeLimit)
        {
            SizeLimitInfoAadhar = "File size is more then 2MB";
            aadhaarFile = null;
        }
        else
        {
            aadhaarFile = e.File;
        }
    }
    private async Task LoadPanFiles(InputFileChangeEventArgs e)
    {
        panCardFile = e.File;
        SizeLimitInfoPan = string.Empty;
        if (e.File.Size > FileSizeLimit)
        {
            SizeLimitInfoPan = "File size is more then 2MB";
            panCardFile = null;
        }
        else
        {
            panCardFile = e.File;
        }
    }

    private async Task LoadBankFiles(InputFileChangeEventArgs e)
    {
        SizeLimitInfoPassbook = string.Empty;
        if (e.File.Size > FileSizeLimit)
        {
            SizeLimitInfoPassbook = "File size is more then 2MB";
            bankPassbookFile = null;
        }
        else
        {
            bankPassbookFile = e.File;
        }
    }

    private async Task LoadCertificateFiles(InputFileChangeEventArgs e)
    {
        SizeLimitInfoCertificate = string.Empty;
        if (e.File.Size > FileSizeLimit)
        {
            SizeLimitInfoCertificate = "File size is more then 2MB";
            certificateFiles = null;
        }
        else
        {
            certificateFiles = e.File;
        }
    }
    private async Task LoademployeeProfilePhoto(InputFileChangeEventArgs e)
    {
        SizeLimitInfoProfilePic = string.Empty;
        //if(e.File.Size > 2097152)
        if (e.File.Size > FileSizeLimit)
        {
            SizeLimitInfoProfilePic = "File size is more then 2MB";
            employeeProfilePhoto = null;
        }
        else
        {
            employeeProfilePhoto = e.File;
        }
    }

    public void Init()
    {
        Employee model = new();
    }

    private string BaseUri = string.Empty;
    string AdharView = string.Empty;
    string PanView = string.Empty;
    string BankPassView = string.Empty;
    string CertificateView = string.Empty;
    string ProfilePicView = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Onload = true;
        BaseUri = NavigationManager.BaseUri;
        SkillOptions = new List<EmployeeSkills>(await client.GetAllSkill());
        company = new List<Company>(await client.GetAllCompany());
        employee = new List<Employee>(await client.GetAllEmployee());
        designation = new List<DesignationDTO>(await client.GetAllDesignations());
        EmployeeInsurance.Add(new EmployeeInsurance());

        if (Key != null)
        {
            var responce = await client.GetOnboardingDataById(Key);
            if (responce.IsSuccess)
            {
                var data = responce.Result;
                if (data != null)
                {
                    employeeOnboardingDto = data;
                    model.CompanyCode = data.CompanyCode;
                    model.EmployeeName = data.Name;
                    model.fatherName = data.fatherName;
                    model.EmergencyContactNumber = data.EmergencyContactNumber;
                    model.MobileNumber = data.MobileNumber;
                    model.DateOfBirth = data.DateOfBirth;
                    model.AadhaarNumber = data.AadhaarNumber;
                    model.PANNumber = data.PANNumber;
                    model.UANNo = data.UANNo;
                    model.EmployeeEducation = data.EmployeeGraduation;
                    model.EmployeeEducationDetails = data.EmployeeEducationDetails;
                    model.PermanentAddress = data.PermanentAddress;
                    model.PCountry = data.PCountry;
                    model.PState = data.PState;
                    model.PPin = data.PPin;
                    model.checkbox = data.checkbox;
                    model.CurrentAddress = data.CurrentAddress;
                    model.CCountry = data.CCountry;
                    model.CState = data.CState;
                    model.CPin = data.CPin;
                    model.EmpBankName = data.EmpBankName;
                    model.EmpAccountName = data.EmpAccountName;
                    model.EmpBankAccNumber = data.EmpBankAccNumber;
                    model.EmpBankIfsc = data.EmpBankIfsc;
                    model.ExternalEmailId = data.ExternalEmailId;
                    model.EmployeeEducation = data.EmployeeGraduation;
                    model.OtherSkills = data.OtherSkills;
                    model.DateOfJoin = date != DateTime.MinValue ? date : DateTime.Now;

                    if (data.SkillIDs != "")
                        SelectedSkill = new List<int>(Array.ConvertAll(data.SkillIDs.Split(','), int.Parse));
                    if (data.AadhaarFile != "")
                        AdharView = $"{BaseUri}EmployeesZone/{data.AadhaarFile}";
                    if (data.PanFile != "")
                        PanView = $"{BaseUri}EmployeesZone/{data.PanFile}";
                    if (data.BankPassbookFile != "")
                        BankPassView = $"{BaseUri}EmployeesZone/{data.BankPassbookFile}";
                    if (data.CertificateFile != "")
                        CertificateView = $"{BaseUri}EmployeesZone/{data.CertificateFile}";
                    if (data.ProfilePhotoFile != "")
                        ProfilePicView = $"{BaseUri}EmployeesZone/{data.ProfilePhotoFile}";

                    if (data.CompanyCode != null)
                        GetEmployeeId();
                }

            }
        }
        if (Id > 0)
        {
            model = await client.GetEmployeeById(Id);
            var EI = new List<EmployeeInsurance>(await client.GetEmployeeInsuranceById(Id));
            EmployeeInsurance = EI;
            employee = employee.Where(x => x.EmailId != model.EmailId).ToList();
            var skillOption = await client.GetEmployeeSkillsIDs(Id);
            SelectedSkill.AddRange(skillOption.Select(tc => tc.EmployeeSkillId));
            employeeFiles = await GetEmployeeFiles(Id);
            if (employeeFiles != null)
            {
                if (employeeFiles.AadhaarFile != "")
                    AdharView = $"{BaseUri}EmployeesZone/{employeeFiles.AadhaarFile}";
                if (employeeFiles.PanFile != "")
                    PanView = $"{BaseUri}EmployeesZone/{employeeFiles.PanFile}";
                if (employeeFiles.BankPassbookFile != "")
                    BankPassView = $"{BaseUri}EmployeesZone/{employeeFiles.BankPassbookFile}";
                if (employeeFiles.CertificateFile != "")
                    CertificateView = $"{BaseUri}EmployeesZone/{employeeFiles.CertificateFile}";
                if (employeeFiles.ProfilePhotoFile != "")
                    ProfilePicView = $"{BaseUri}EmployeesZone/{employeeFiles.ProfilePhotoFile}";
            }
            if (model.AadhaarNumber != null)
            {
                var listData = await client.GetListItemByEmail(model.AadhaarNumber);
                model.SharepointPortal = listData.Portal;
                model.LM = listData.LM;
                model.EMS = listData.EMS;
                model.CMS = listData.CMS;
                selectedLM = employee.Where(x => x.EmailId == listData.LMManagerEmail).FirstOrDefault();
                selectedEMS = employee.Where(x => x.EmailId == listData.EMSManagerEmail).FirstOrDefault();
            }

        }
        else
        {
            Init();
        }
        Onload = false;
    }

    public async Task<EmployeeFilesMapping> GetEmployeeFiles(int id)
    {
        return await client.GetEmployeeFilesById(id);
    }

    protected async Task OnValidSubmit()
    {
        submit = true;
        if (model.SharepointPortal == true && (selectedEMS == null || selectedLM == null))
            return;

        Message = string.Empty;
        MessageBody = "Thank you!";
        IsError = false;
        IsSuccess = false;
        show = true;
        TaskCompleted = false;
        try
        {
            if (model.DateOfLeaving != DateTime.MinValue && model.DateOfLeaving < model.DateOfJoin)
            {
                Message = "Alert";
                MessageBody = "Leaving Date is greater then Joining Date!";
                TaskCompleted = true;
                return;
            }
            Message = "Please wait";
            int Id = model.Id;

            model.CompanyId = company.Where(o => o.CompanyCode == model.CompanyCode).Select(o => o.Id).First();

            //  // Assign EmployeeId to each item in EmployeeInsurance list
            // foreach (var insurance in EmployeeInsurance)
            // {
            //     insurance.EmployeeId = model.Id;
            // }

            model.EmployeeInsurance = EmployeeInsurance;

            var response = await client.UpsertEmployeeAsync(model);
            if (response.IsSuccess)
            {
                model = response.Result;
                if (model.Id > 0)
                {
                    if (EmployeeSkillIds.ContainsKey(model.Id))
                    {
                        EmployeeSkillIds[model.Id] = SelectedSkill.Select(id => id).ToList();
                    }
                    else
                    {
                        EmployeeSkillIds.Add(model.Id, SelectedSkill.Select(id => id).ToList());
                    }

                    var result = await client.UpsertEmployeeSkillsIDsMap(EmployeeSkillIds);

                    EmployeeFilesMapping employeeFilesMapping = new EmployeeFilesMapping();
                    if (Key != null)
                    {
                        employeeFilesMapping.ProfilePhotoFile = employeeOnboardingDto.ProfilePhotoFile;
                        employeeFilesMapping.AadhaarFile = employeeOnboardingDto.AadhaarFile;
                        employeeFilesMapping.PanFile = employeeOnboardingDto.PanFile;
                        employeeFilesMapping.CertificateFile = employeeOnboardingDto.CertificateFile;
                        employeeFilesMapping.BankPassbookFile = employeeOnboardingDto.BankPassbookFile;
                    }

                    string[] propertyNames = { "Aadhaar", "Pan", "BankPassbook", "Certificate", "ProfilePhoto" };
                    foreach (string propertyName in propertyNames)
                    {
                        IBrowserFile file = null;
                        switch (propertyName)
                        {
                            case "Aadhaar":
                                file = aadhaarFile;
                                break;
                            case "Pan":
                                file = panCardFile;
                                break;
                            case "BankPassbook":
                                file = bankPassbookFile;
                                break;
                            case "Certificate":
                                file = certificateFiles;
                                break;
                            case "ProfilePhoto":
                                file = employeeProfilePhoto;
                                break;
                        }

                        if (file != null)
                        {
                            var uploadedFile = await FileUpload(file, propertyName);
                            // employeeFilesMapping.GetType().GetProperty(propertyName + "File")?.SetValue(employeeFilesMapping, uploadedFile);


                            var propertyInfo = typeof(EmployeeFilesMapping).GetProperty(propertyName + "File");
                            if (propertyInfo != null)
                            {
                                propertyInfo.SetValue(employeeFilesMapping, uploadedFile);
                            }
                        }
                    }

                    employeeFilesMapping.EmployeeId = model.Id;

                    var UploadResponse = await client.UpsertEmployeeFiles(employeeFilesMapping);


                }
                if (EmailRequest)
                {
                    await SendRequestToCreateEmail();
                }

                await AddItem();

                Message = Id > 0 ? "Successfully Updated" : "Successfully Added";
                TaskCompleted = true;
            }
            else
            {
                Message = "Error!";
                MessageBody = response.Message;
                TaskCompleted = true;
            }

        }
        catch (Exception ex)
        {
            logger.LogCritical(ex, ex.Message);
            IsError = true;
            Message = "Error!";
            MessageBody = ex.Message;
            TaskCompleted = true;
        }
    }

    private void CopyAddress(ChangeEventArgs args)
    {
        if (!model.checkbox)
        {
            model.CurrentAddress = model.PermanentAddress;
            model.CState = model.PState;
            model.CCountry = model.PCountry;
            model.CPin = model.PPin;
        }
        else
        {
            model.CurrentAddress = string.Empty;
            model.CState = string.Empty;
            model.CCountry = string.Empty;
            model.CPin = string.Empty;
        }
    }

    private async void ResetForm()
    {
        show = false;
        if (Message.Contains("Successfully Added"))
        {
            model = new();
        }
        if (model.Id > 0)
        {
            employeeFiles = await GetEmployeeFiles(Id);
            if (employeeFiles != null)
            {
                if (employeeFiles.AadhaarFile != "")
                    AdharView = $"{BaseUri}EmployeesZone/{employeeFiles.AadhaarFile}";
                if (employeeFiles.PanFile != "")
                    PanView = $"{BaseUri}EmployeesZone/{employeeFiles.PanFile}";
                if (employeeFiles.BankPassbookFile != "")
                    BankPassView = $"{BaseUri}EmployeesZone/{employeeFiles.BankPassbookFile}";
                if (employeeFiles.CertificateFile != "")
                    CertificateView = $"{BaseUri}EmployeesZone/{employeeFiles.CertificateFile}";
                if (employeeFiles.ProfilePhotoFile != "")
                    ProfilePicView = $"{BaseUri}EmployeesZone/{employeeFiles.ProfilePhotoFile}";
            }
        }
        StateHasChanged();
    }
    public void OnClose()
    {
        NavigationManager.NavigateTo("/employees");
    }
    public async void ClosePopUp()
    {
        show = false;
        AddSkill = false;
        AddDesigntions = false;
        ShowPreview = false;
        SkillOptions = new List<EmployeeSkills>(await client.GetAllSkill());
        StateHasChanged();
    }
    public async void ClosePreview()
    {
        show = false;
        AddSkill = false;
        ShowPreview = false;
        StateHasChanged();
    }

    long FileSizeLimit = 1024 * 2048;
    private List<File> files = new();
    private List<UploadResult> uploadResults = new();
    private int maxAllowedFiles = 3;

    //protected override bool ShouldRender() => shouldRender;

    private async Task<string> FileUpload(IBrowserFile file, string type)
    {
        //shouldRender = false;
        long maxFileSize = 1024 * 2048; //2Mb
        var upload = false;
        files.Clear();
        using var content = new MultipartFormDataContent();

        string newFileName = $"{model.EmployeeName} - {model.EmployeeId} - {type} - {file.Name}";

        if (uploadResults.SingleOrDefault(
            f => f.FileName == file.Name) is null)
        {
            try
            {
                files.Add(new() { Name = file.Name });

                var fileContent =
                    new StreamContent(file.OpenReadStream(maxFileSize));

                fileContent.Headers.ContentType =
                    new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);

                content.Add(
                    content: fileContent,
                    name: "\"files\"",
                    fileName: newFileName);

                upload = true;
            }
            catch (Exception ex)
            {
                logger.LogInformation(
                    "{FileName} not uploaded (Err: 6): {Message}",
                    file.Name, ex.Message);

                uploadResults.Add(
                    new()
                        {
                            FileName = file.Name,
                            ErrorCode = 6,
                            Uploaded = false
                        });
            }
        }

        string FilePath = string.Empty;
        if (upload)
        {
            try
            {

                var response = await _httpClient.PostAsync("/Filesave", content);

                var newUploadResults = await response.Content
                    .ReadFromJsonAsync<IList<UploadResult>>();

                if (newUploadResults is not null)
                {
                    uploadResults = uploadResults.Concat(newUploadResults).ToList();
                    foreach (var r in uploadResults)
                    {
                        FilePath = r.FileName;
                        if (FilePath.Contains("Aadhaar"))
                            aadhaarFile = null;
                        else if (FilePath.Contains("Pan"))
                            panCardFile = null;
                        else if (FilePath.Contains("BankPassbook"))
                            bankPassbookFile = null;
                        else if (FilePath.Contains("certificate"))
                            certificateFiles = null;
                        else if (FilePath.Contains("ProfilePhoto"))
                            employeeProfilePhoto = null;
                    }
                }

            }
            catch (Exception ex)
            {
                //throw;
            }
        }

        //shouldRender = true;
        return FilePath;
    }

    private static bool FileUpload(IList<UploadResult> uploadResults,
        string? fileName, ILogger<EmployeeDataConfig> logger, out UploadResult result)
    {
        result = uploadResults.SingleOrDefault(f => f.FileName == fileName) ?? new();

        if (!result.Uploaded)
        {
            logger.LogInformation("{FileName} not uploaded (Err: 5)", fileName);
            result.ErrorCode = 5;
        }

        return result.Uploaded;
    }

    private class File
    {
        public string? Name { get; set; }
    }

    public void GetEmployeeId()
    {
        if (model.CompanyCode != null)
        {
            var targetCompanyEmpIDs = employee.Where(o => o.CompanyCode == model.CompanyCode).Select(o => o.EmployeeId).ToList();
            string lastEmployeeId = targetCompanyEmpIDs
            .OrderByDescending(id => id, StringComparer.OrdinalIgnoreCase)
            .FirstOrDefault();
            if (lastEmployeeId != null)
            {
                string pattern = @"\d+";
                Match match = Regex.Match(lastEmployeeId, pattern);

                if (match.Success)
                {
                    string numericPart = match.Value;
                    if (int.TryParse(numericPart, out int lastNumericId))
                    {
                        lastNumericId++;
                        string updatedEmployeeId = string.Empty;
                        if (lastNumericId < 1000)
                            updatedEmployeeId = lastEmployeeId.Replace(numericPart, lastNumericId.ToString("d3"));
                        else
                            updatedEmployeeId = lastEmployeeId.Replace(numericPart, lastNumericId.ToString());

                        model.EmployeeId = updatedEmployeeId;
                    }
                }

            }
            else
            {
                model.EmployeeId = model.CompanyCode + 1.ToString("d3");
            }
        }
    }

    private Company? selectedCompany { get; set; }
    private async Task<IEnumerable<Company>> CompanySearch(string value)
    {
        model.CompanyCode = null;
        await Task.Delay(5);
        if (string.IsNullOrEmpty(value))
            return company;
        return company
            .Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase) ||
            x.CompanyCode.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private Employee? selectedEMS { get; set; }
    private Employee? selectedLM { get; set; }
    private async Task<IEnumerable<Employee>> EmsSearch(string value)
    {
        await Task.Delay(5);
        if (string.IsNullOrEmpty(value))
            return employee.Where(o => o.Status != EmployeeStatus.Resigned);

        return employee.Where(o => o.Status != EmployeeStatus.Resigned)
            .Where(x => x.EmployeeId.Contains(value, StringComparison.InvariantCultureIgnoreCase) || x.EmployeeName.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    public async Task SendRequestToCreateEmail()
    {
        CreateEmailRequest createEmailRequest = new();
        createEmailRequest.Name = model.EmployeeName;
        createEmailRequest.CompanyCode = model.CompanyCode;
        createEmailRequest.Email = model.ExternalEmailId;
        createEmailRequest.LandingUrl = model.ReturnUrl;
        createEmailRequest.EmployeeID = model.EmployeeId;
        var response = await client.CreateEmailRequest(createEmailRequest);

    }
    SharepointListUpdate updateListItemRequest = new();
    private async Task AddItem()
    {
        try
        {

            updateListItemRequest.EmployeeName = model.EmployeeName;
            updateListItemRequest.Gender = "";
            updateListItemRequest.AadharNumber = model.AadhaarNumber;
            updateListItemRequest.Designation = model.Designation;
            updateListItemRequest.EmployeeID = model.EmployeeId;
            updateListItemRequest.DOB = model.DateOfBirth;
            updateListItemRequest.DateOfJoining = model.DateOfJoin;
            updateListItemRequest.Status = model.Status != EmployeeStatus.Resigned ? "Active" : "InActive";
            updateListItemRequest.Department = model.Department;
            updateListItemRequest.Email = model.EmailId;
            updateListItemRequest.Portal = model.SharepointPortal;
            updateListItemRequest.LM = model.LM;
            updateListItemRequest.EMS = model.EMS;
            updateListItemRequest.CMS = model.CMS;
            if (selectedLM != null)
            {
                updateListItemRequest.LMManagerName = selectedLM.EmployeeName;
                updateListItemRequest.LMManagerID = selectedLM.EmployeeId;
                updateListItemRequest.LMManagerEmail = selectedLM.EmailId;
            }
            // updateListItemRequest.LMManagerID = selectedLM.Id.ToString();
            // updateListItemRequest.ManagerID = selectedEMS.Id.ToString();
            if (selectedEMS != null)
            {
                updateListItemRequest.EMSManagerName = selectedEMS.EmployeeName;
                updateListItemRequest.EMSManagerID = selectedEMS.EmployeeId;
                updateListItemRequest.EMSManagerEmail = selectedEMS.EmailId;
            }

            if (model.SharepointSync)
                await client.InsertListItem(updateListItemRequest);
        }
        catch (Exception ex)
        {

        }

    }

    private async Task<IEnumerable<DesignationDTO>> DesignationSearch(string value)
    {
        await Task.Delay(5);
        if (string.IsNullOrEmpty(value))
            return designation;
        return designation
        .Where(x => x.Designation.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<Employee>> ManagerSearch(string value)
    {
        await Task.Delay(5);
        if (string.IsNullOrEmpty(value))
            return employee;
        return employee
        .Where(x => x.EmployeeName.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}

