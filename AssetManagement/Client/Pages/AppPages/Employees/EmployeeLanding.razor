@page "/emp/{key}"
@using AssetManagement.Client.Client;
@using AssetManagement.Client.Pages.AppPages.Employees.Component
@using AssetManagement.Client.Shared.Popup
@using AssetManagement.Dto.Models
@using System.Text.Json;
@using AssetManagement.Dto;
@using Microsoft.AspNetCore.Authorization
@inject AppClient client
@inject HttpClient httpClient
@inject ILogger<EmployeeDataConfig> logger
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager
@layout NoLayout
@attribute [AllowAnonymous]


<div>
    <div class="card">
        <div class="card-header bg-secondary text-center">
            @Title
        </div>
        <div class="card-body">
            @if (model == null && !TaskCompleted)
            {
                <div class="loader-container mt-4">
                    <div class="loader"></div>
                </div>

            }
            else if (model == null && TaskCompleted)
            {
                <p>No data found!</p>
            }
            else
            {
                <EditForm Model="@model" OnValidSubmit="@OnValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group row mb-2">
                        <label class="col-form-label col-md-2 bold-font required-field">Company Code</label>
                        <div class="col-md-2">
                            <InputText id="CompanyCode" @bind-Value="model.CompanyCode" class="form-control" disabled />
                            <ValidationMessage For="() => model.CompanyCode" />
                        </div>

                        <label class="col-form-label col-md-2 bold-font required-field">Employee Id</label>
                        <div class="col-md-2">
                            <InputText id="EmployeeId" @bind-Value="model.EmployeeId" class="form-control" disabled />
                            <ValidationMessage For="() => model.EmployeeId" />
                        </div>

                        <label class="col-form-label col-md-1 bold-font required-field">Name</label>
                        <div class="col-md-3">
                            <InputText id="EmployeeName" @bind-Value="model.EmployeeName" class="form-control" />
                            <ValidationMessage For="() => model.EmployeeName" />
                        </div>
                    </div>

                    <div class="form-group row mb-2">
                        <label class="col-form-label col-md-2 bold-font required-field">Employee Status</label>
                        <div class="col-md-2">
                            <InputSelect id="Status" @bind-Value="model.Status" class="form-control" disabled>
                                @foreach (var s in Enum.GetValues(typeof(EmployeeStatus)))
                                {
                                    <option value="@s">@s</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="() => model.Status" />
                        </div>

                        <label class="col-form-label col-md-2 bold-font required-field">Father's Name</label>
                        <div class="col-md-2">
                            <InputText id="fatherName" @bind-Value="model.fatherName" class="form-control" />
                            <ValidationMessage For="() => model.fatherName" />
                        </div>

                        <label class="col-form-label col-md-1 bold-font required-field">Email</label>
                        <div class="col-md-3">
                            <InputText id="EmailId" @bind-Value="model.EmailId" class="form-control" disabled />
                            <ValidationMessage For="() => model.EmailId" />
                        </div>
                    </div>

                    <div class="form-group row mb-2">
                        <label class="col-form-label col-md-2 bold-font required-field">Emergency Number</label>
                        <div class="col-md-2">
                            <InputText id="EmergencyContactNumber" @bind-Value="model.EmergencyContactNumber" class="form-control" />
                            <ValidationMessage For="() => model.EmergencyContactNumber" />
                        </div>

                        <label class="col-form-label col-md-2 bold-font required-field">Date of join</label>
                        <div class="col-md-2">
                            <InputDate id="DateOfJoin" @bind-Value="model.DateOfJoin" class="form-control" />
                            <ValidationMessage For="() => model.DateOfJoin" />
                        </div>

                        <label class="col-form-label col-md-1 bold-font required-field">Mobile</label>
                        <div class="col-md-3">
                            <InputText id="MobileNumber" @bind-Value="model.MobileNumber" class="form-control" />
                            <ValidationMessage For="() => model.MobileNumber" />
                        </div>
                    </div>

                    <div class="form-group row mb-2">
                        <label class="col-form-label col-md-2 bold-font required-field">Date Of Birth</label>
                        <div class="col-md-2">
                            <InputDate id="DateOfBirth" @bind-Value="model.DateOfBirth" class="form-control" />
                            <ValidationMessage For="() => model.DateOfBirth" />
                        </div>

                        <label class="col-form-label col-md-2 bold-font required-field">Aadhar No</label>
                        <div class="col-md-2">
                            <InputText id="AadhaarNumber" @bind-Value="model.AadhaarNumber" class="form-control" />
                            <ValidationMessage For="() => model.AadhaarNumber" />
                        </div>

                        <label class="col-form-label col-md-1 bold-font">PAN No</label>
                        <div class="col-md-3">
                            <InputText id="PANNumber" @bind-Value="model.PANNumber" class="form-control" />
                            <ValidationMessage For="() => model.PANNumber" />
                        </div>

                    </div>

                    <div class="form-group row mb-2">
                        <label class="col-form-label col-md-2 bold-font required-field">Reporting To</label>
                        <div class="col-md-2">
                            <InputText id="ReportingTo" @bind-Value="model.ReportingTo" class="form-control" disabled />
                            <ValidationMessage For="() => model.ReportingTo" />
                        </div>

                        <label class="col-form-label col-md-2 bold-font required-field">Designation</label>
                        <div class="col-md-2">
                            <InputText id="Designation" @bind-Value="model.Designation" class="form-control" disabled />
                            <ValidationMessage For="() => model.Designation" />
                        </div>

                        <label class="col-form-label col-md-1 bold-font">UAN No</label>
                        <div class="col-md-3">
                            <InputText id="UANNo" @bind-Value="model.UANNo" class="form-control" />
                            <ValidationMessage For="() => model.UANNo" />
                        </div>
                    </div>

                    <div class="form-group row mb-2">
                        <label class="col-form-label col-md-2 bold-font">Education</label>
                        <div class="col-md-2">
                            <InputSelect id="EmployeeEducation" @bind-Value="model.EmployeeEducation" class="form-control">
                                <option>- Select -</option>
                                <option value="Graduate">Graduate</option>
                                <option value="Postgraduate">Postgraduate</option>
                                <option value="Undergraduate">Undergraduate</option>
                            </InputSelect>
                            <ValidationMessage For="() => model.EmployeeEducation" />
                        </div>

                        <label class="col-form-label col-md-2 bold-font">Education Details</label>
                        <div class="col-md-6">
                            <InputTextArea id="EmployeeEducationDetails" @bind-Value="model.EmployeeEducationDetails" class="form-control" />
                            <ValidationMessage For="() => model.EmployeeEducationDetails" />
                        </div>
                    </div>
                    <div class="form-group row mb-2">
                        @*<label class="col-form-label col-md-2 bold-font">EmployeeCategory</label>
                    <div class="col-md-2">
                    <InputSelect id="EmployeeCategory" @bind-Value="model.EmployeeCategory" class="form-control">
                    <option>- Select -</option>
                    <option value="L1">L1</option>
                    <option value="L2">L2</option>
                    <option value="L3">L3</option>
                    <option value="L4">L4</option>
                    <option value="L5">L5</option>
                    </InputSelect>
                    <ValidationMessage For="() => model.EmployeeCategory" />
                    </div>*@
                        @*<label class="col-form-label col-md-2 bold-font">Department</label>
                    <div class="col-md-4">
                    <InputSelect id="Department" @bind-Value="model.Department" class="form-control">
                    <option>- Select -</option>
                    @foreach (var d in Enum.GetValues(typeof(Departments)))
                    {
                    <option value="@d">@d</option>
                    }
                    </InputSelect>
                    <ValidationMessage For="() => model.EmployeeCategory" />
                    </div>*@
                    </div>

                    <div class="form-group row mb-2">
                        <label class="col-form-label col-md-2 bold-font">Department</label>
                        <div class="col-md-4">
                            <InputSelect id="Department" @bind-Value="model.Department" class="form-control">
                                <option>- Select -</option>
                                @foreach (var d in Enum.GetValues(typeof(Departments)))
                                {
                                    <option value="@d">@d</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="() => model.EmployeeCategory" />
                        </div>
                        <label class="col-form-label col-md-2 bold-font required-field">Skills</label>
                        <div class="col-md-4">
                            <HxMultiSelect TItem="EmployeeSkills"
                                           AutoSort="false"
                                           TValue="int"
                                           Data="@SkillOptions"
                            @bind-Value="@SelectedSkill"
                                           TextSelector="@(p => p.Skill)"
                                           ValueSelector="@(p => p.Id)"
                                           EmptyText="- select -"
                                           NullDataText="Loading..." />
                        </div>
                        @*<div class="col-md-2 col-sm-12">
                    <button class="btn btn-primary" style="top:2px; height:40px" @onclick="()=>AddSkill = true">Add Skills</button>
                    </div>*@
                    </div>

                    <div class="form-group row mb-2">
                        <label class="col-form-label col-md-2 bold-font">Other Skill's</label>
                        <div class="col-md-10">
                            <InputTextArea id="OtherSkills" @bind-Value="model.OtherSkills" class="form-control" />
                            <ValidationMessage For="() => model.OtherSkills" />
                        </div>
                    </div>

                    <div class="form-group row mb-2">
                        <label class="col-form-label col-md-2 bold-font">External Email</label>
                        <div class="col-md-4">
                            <InputText id="ExternalEmailId" @bind-Value="model.ExternalEmailId" class="form-control" />
                            <ValidationMessage For="() => model.ExternalEmailId" />
                        </div>

                    </div>


                    <div class="form-group row mb-2">
                        <label class="col-form-label col-md-2 bold-font">Upload Aadhaar</label>
                        <div class="col-md-4">
                            <div class="input-group">
                                <InputFile id="aadharfile" OnChange="@LoadAadhaarFiles" class="form-control" accept=".pdf, image/jpeg, image/jpg, image/png" />
                                <div class="input-group-append">
                                    <span class="input-group-text" style="height:100%">
                                        @if (aadhaarFile == null && AdharView == string.Empty)
                                        {
                                            <i class="fa fa-exclamation-circle" aria-hidden="true" title="No file to preview"></i>
                                        }
                                        else if ((model.Id > 0 || Key != null) && AdharView != string.Empty)
                                        {
                                            if (IsImageFile(filePath))
                                            {
                                                <a @onclick="()=>{ShowPreview = true; filePath = Uri.EscapeUriString(AdharView);}"><i class="fa fa-file text-warning" style="cursor: pointer" aria-hidden="true" title="View"></i></a>
                                            }
                                            else
                                            {

                                                <a href="@Uri.EscapeUriString(AdharView)" target="_blank" rel="noopener noreferrer"> <i class="fa fa-file text-warning" style="cursor: pointer" aria-hidden="true" title="View"></i> </a>
                                            }
                                        }
                                        else
                                        {
                                            <i class="fa fa-check text-success" title="Selected"></i>
                                        }
                                    </span>
                                </div>
                            </div>
                            <p class="text-primary">Max allowed file size 2Mb</p>
                            <p class="text-danger" style="margin-top: -18px;">@SizeLimitInfoAadhar</p>
                            <span style="color:red">@AdharFileErrorMsg</span>
                        </div>

                        <label class="col-form-label col-md-2 bold-font">Upload PAN Card</label>
                        <div class="col-md-4">
                            <div class="input-group">
                                <InputFile id="panfile" OnChange="@LoadPanFiles" class="form-control" accept=".pdf, image/jpeg, image/jpg, image/png" />
                                <div class="input-group-append">
                                    <span class="input-group-text" style="height:100%">
                                        @if (panCardFile == null && PanView == string.Empty)
                                        {
                                            <i class="fa fa-exclamation-circle" aria-hidden="true" title="No file to preview"></i>
                                        }
                                        else if ((model.Id > 0 || Key != null) && PanView != string.Empty)
                                        {
                                            if (IsImageFile(filePath))
                                            {
                                                <a @onclick="()=>{ShowPreview = true; filePath = Uri.EscapeUriString(PanView);}"><i class="fa fa-file text-warning" style="cursor: pointer" aria-hidden="true" title="View"></i></a>
                                            }
                                            else
                                            {

                                                <a href="@Uri.EscapeUriString(PanView)" target="_blank" rel="noopener noreferrer"> <i class="fa fa-file text-warning" style="cursor: pointer" aria-hidden="true" title="View"></i> </a>
                                            }
                                        }
                                        else
                                        {
                                            <i class="fa fa-check text-success" title="Selected"></i>
                                        }
                                    </span>
                                </div>
                            </div>
                            <p class="text-primary">Max allowed file size 2Mb</p>
                            <p class="text-danger" style="margin-top: -18px;">@SizeLimitInfoPan</p>
                            <span style="color:red">@PanFileErrorMsg</span>
                        </div>
                    </div>

                    <div class="form-group row mb-2">
                        <label class="col-form-label col-md-2 bold-font">Upload BankPassbook</label>
                        <div class="col-md-4">
                            <div class="input-group">
                                <InputFile id="aadharfile" OnChange="@LoadBankFiles" class="form-control" accept=".pdf, image/jpeg, image/jpg, image/png" />
                                <div class="input-group-append">
                                    <span class="input-group-text" style="height:100%">
                                        @if (bankPassbookFile == null && BankPassView == string.Empty)
                                        {
                                            <i class="fa fa-exclamation-circle" aria-hidden="true" title="No file to preview"></i>
                                        }
                                        else if ((model.Id > 0 || Key != null) && BankPassView != string.Empty)
                                        {

                                            if (IsImageFile(filePath))
                                            {
                                                <a @onclick="()=>{ShowPreview = true; filePath = Uri.EscapeUriString(BankPassView);}"><i class="fa fa-file text-warning" style="cursor: pointer" aria-hidden="true" title="View"></i></a>
                                            }
                                            else
                                            {

                                                <a href="@Uri.EscapeUriString(BankPassView)" target="_blank" rel="noopener noreferrer"> <i class="fa fa-file text-warning" style="cursor: pointer" aria-hidden="true" title="View"></i> </a>
                                            }
                                        }
                                        else
                                        {
                                            <i class="fa fa-check text-success" title="Selected"></i>
                                        }
                                    </span>
                                </div>
                            </div>
                            <p class="text-primary"> Max allowed file size 2Mb</p>
                            <p class="text-danger" style="margin-top:-18px;"> @SizeLimitInfoPassbook</p>
                            <span style="color:red">@BankPassFileErrorMsg</span>
                        </div>

                        <label class="col-form-label col-md-2 bold-font">Upload Certificate</label>
                        <div class="col-md-4">
                            <div class="input-group">
                                <InputFile id="panfile" OnChange="@LoadCertificateFiles" class="form-control" accept=".pdf, image/jpeg, image/jpg, image/png" />
                                <div class="input-group-append">
                                    <span class="input-group-text" style="height:100%">
                                        @if (certificateFiles == null && CertificateView == string.Empty)
                                        {
                                            <i class="fa fa-exclamation-circle" aria-hidden="true" title="No file to preview"></i>
                                        }
                                        else if ((model.Id > 0 || Key != null) && CertificateView != string.Empty)
                                        {
                                            if (IsImageFile(filePath))
                                            {
                                                <a @onclick="()=>{ShowPreview = true; filePath = Uri.EscapeUriString(CertificateView);}"><i class="fa fa-file text-warning" style="cursor: pointer" aria-hidden="true" title="View"></i></a>
                                            }
                                            else
                                            {

                                                <a href="@Uri.EscapeUriString(CertificateView)" target="_blank" rel="noopener noreferrer"> <i class="fa fa-file text-warning" style="cursor: pointer" aria-hidden="true" title="View"></i> </a>
                                            }

                                        }
                                        else
                                        {
                                            <i class="fa fa-check text-success" title="Selected"></i>
                                        }
                                    </span>
                                </div>
                            </div>
                            <p class="text-primary"> Max allowed file size 2Mb</p>
                            <p class="text-danger" style="margin-top:-18px;"> @SizeLimitInfoCertificate</p>
                            <span style="color:red">@CertificateFileErrorMsg</span>
                        </div>
                    </div>

                    <div class="form-group row mb-2">
                        <label class="col-form-label col-md-2 bold-font">Upload Profile Pic</label>
                        <div class="col-md-4">
                            <div class="input-group">
                                <InputFile id="ProfilePicfile" OnChange="@LoademployeeProfilePhoto" class="form-control" accept="image/jpeg, image/jpg, image/png" />
                                <div class="input-group-append">
                                    <span class="input-group-text" style="height:100%">
                                        @if (employeeProfilePhoto == null && ProfilePicView == string.Empty)
                                        {
                                            <i class="fa fa-exclamation-circle" aria-hidden="true" title="No file to preview"></i>
                                        }
                                        else if ((model.Id > 0 || Key != null) && ProfilePicView != string.Empty)
                                        {


                                            if (IsImageFile(filePath))
                                            {
                                                <a @onclick="()=>{ShowPreview = true; filePath = Uri.EscapeUriString(ProfilePicView);}"><i class="fa fa-file text-warning" style="cursor: pointer" aria-hidden="true" title="View"></i></a>
                                            }
                                            else
                                            {

                                                <a href="@Uri.EscapeUriString(ProfilePicView)" target="_blank" rel="noopener noreferrer"> <i class="fa fa-file text-warning" style="cursor: pointer" aria-hidden="true" title="View"></i> </a>
                                            }
                                        }
                                        else
                                        {
                                            <i class="fa fa-check text-success" title="Selected"></i>
                                        }
                                    </span>
                                </div>
                            </div>
                            <p class="text-primary"> Max allowed file size 2Mb</p>
                            <p class="text-danger" style="margin-top:-18px;"> @SizeLimitInfoProfilePic</p>
                            <span style="color:red">@ProfilePicFileErrorMsg</span>
                        </div>
                    </div>
                    <MudExpansionPanels MultiExpansion="true">
                        <MudExpansionPanel Text=" Permanent Address Details" MaxHeight="500">
                            <div class="form-group row">
                                <label class="col-form-label col-md-2 bold-font required-field">Address</label>
                                <div class="col-md-10 mb-2">
                                    <InputText id="PermanentAddress" @bind-Value="model.PermanentAddress" class="form-control" />
                                    <ValidationMessage For="() => model.PermanentAddress" />
                                </div>

                                <label class="col-form-label col-md-2 bold-font required-field">State</label>
                                <div class="col-md-2">
                                    <InputText id="PState" @bind-Value="model.PState" class="form-control" />
                                    <ValidationMessage For="() => model.PState" />
                                </div>

                                <label class="col-form-label col-md-2 bold-font required-field">Country</label>
                                <div class="col-md-2">
                                    <InputText id="PCountry" @bind-Value="model.PCountry" class="form-control" />
                                    <ValidationMessage For="() => model.PCountry" />
                                </div>

                                <label class="col-form-label col-md-2 bold-font required-field">PIN Code</label>
                                <div class="col-md-2">
                                    <InputText id="PPin" @bind-Value="model.PPin" class="form-control" />
                                    <ValidationMessage For="() => model.PPin" />
                                </div>
                            </div>
                        </MudExpansionPanel>
                        <MudExpansionPanel Text="Current Address Details" MaxHeight="500">
                            <div class="form-group row mb-2">
                                <label class="col-form-label col-md-5 bold-font">Check if Current Address is same As Permanent Address</label>
                                <div class="col-md-1">
                                    <input class="form-check-input mt-3" type="checkbox" @bind="@model.checkbox" @oninput="CopyAddress">
                                </div>
                            </div>
                            <div class="form-group row">
                                <label class="col-form-label col-md-2 bold-font required-field">Address</label>
                                <div class="col-md-10 mb-2">
                                    <InputText id="CurrentAddress" @bind-Value="model.CurrentAddress" class="form-control" />
                                    <ValidationMessage For="() => model.CurrentAddress" />
                                </div>

                                <label class="col-form-label col-md-2 bold-font required-field">State</label>
                                <div class="col-md-2">
                                    <InputText id="CState" @bind-Value="model.CState" class="form-control" />
                                    <ValidationMessage For="() => model.CState" />
                                </div>

                                <label class="col-form-label col-md-2 bold-font required-field">Country</label>
                                <div class="col-md-2">
                                    <InputText id="CCountry" @bind-Value="model.CCountry" class="form-control" />
                                    <ValidationMessage For="() => model.CCountry" />
                                </div>

                                <label class="col-form-label col-md-2 bold-font required-field">PIN Code</label>
                                <div class="col-md-2">
                                    <InputText id="CPin" @bind-Value="model.CPin" class="form-control" />
                                    <ValidationMessage For="() => model.CPin" />
                                </div>
                            </div>
                        </MudExpansionPanel>
                        <MudExpansionPanel Text="Bank Details" MaxHeight="500">
                            <div class="form-group row">
                                <label class="col-form-label col-md-2 bold-font required-field">Bank Name</label>
                                <div class="col-md-10 mb-2">
                                    <InputText id="EmpBankName" @bind-Value="model.EmpBankName" class="form-control" />
                                    <ValidationMessage For="() => model.EmpBankName" />
                                </div>

                                <label class="col-form-label col-md-2 bold-font required-field">Account Name</label>
                                <div class="col-md-2">
                                    <InputText id="PPin" @bind-Value="model.EmpAccountName" class="form-control" />
                                    <ValidationMessage For="() => model.PPin" />
                                </div>

                                <label class="col-form-label col-md-2 bold-font required-field">Account Number</label>
                                <div class="col-md-2">
                                    <InputText id="EmpBankAccNumber" @bind-Value="model.EmpBankAccNumber" class="form-control" />
                                    <ValidationMessage For="() => model.EmpBankAccNumber" />
                                </div>

                                <label class="col-form-label col-md-2 bold-font required-field">IFSC Code</label>
                                <div class="col-md-2">
                                    <InputText id="EmpBankIfsc" @bind-Value="model.EmpBankIfsc" class="form-control" />
                                    <ValidationMessage For="() => model.EmpBankIfsc" />
                                </div>
                            </div>
                        </MudExpansionPanel>
                        <MudExpansionPanel Text="Insurance Form" MaxHeight="500" Class="custom-header" IsExpanded="true">
                            <div class="form-group row mb-2">
                                <label class="col-form-label col-md-2 bold-font">Name</label>
                                <div class="col-md-10">
                                    <span class="form-control"> @model.EmployeeName</span>
                                </div>

                                <label class="col-form-label col-md-2 bold-font">EmployeeId</label>
                                <div class="col-md-10">
                                    <span class="form-control"> @model.EmployeeId</span>
                                </div>

                                <label class="col-form-label col-md-2 bold-font">Email</label>
                                <div class="col-md-10">
                                    <span class="form-control"> @model.EmailId</span>
                                </div>
                            </div>

                            <div class="table-responsive">
                                <table class="table table-striped table-bordered" style="margin-bottom: 0.2rem !important;">
                                    <thead style="text-align:center">
                                        <tr>
                                            <th style="width: 50px;">SN</th>
                                            <th class="name-column">Name</th>
                                            <th style="width: 100px;">Relation</th>
                                            <th style="width: 100px;">DOB</th>
                                            <th style="width: 150px;">Aadhaar</th>
                                            <th style="width: 80px;">Age</th>
                                            <th style="width: 60px;">
                                                <a title="Add Row" style="cursor:pointer; color:darkblue" @onclick="AddEmployeeInsurance">
                                                    <i class="fa fa-plus-circle fa-2x" aria-hidden="true"></i>
                                                </a>
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var e in EmployeeInsurance.Select((value, index) => new { value, index }))
                                        {
                                            // Ensure DOB is set to today's date if it hasn't been set
                                            if (e.value.DOB == default(DateTime))
                                            {
                                                e.value.DOB = DateTime.Today;
                                            }
                                            <tr>
                                                <td>@(e.index + 1)</td>
                                                <td><input type="text" class="form-control" @bind="@e.value.Name" /></td>
                                                <td>
                                                    <select class="form-control" @bind="@e.value.Relation">
                                                        @foreach (var relation in Enum.GetValues(typeof(Relation)).Cast<Relation>())
                                                        {
                                                            <option value="@relation">@relation</option>
                                                        }
                                                    </select>
                                                </td>
                                                <td>
                                                    <InputDate class="form-control" @bind-Value="@e.value.DOB" />
                                                    <div style="margin-left:3px;">@e.value.DOB.ToString("dd-MMM-yyyy")</div>
                                                </td>
                                                <td><input type="text" class="form-control" @bind="@e.value.Aadhaar" /></td>
                                                <td>
                                                    <input type="text" class="form-control" value="@(CalculateAge(e.value.DOB))" readonly />
                                                </td>
                                                <td style="text-align:center">
                                                    <a title="Remove Row" style="cursor:pointer;" @onclick="() => RemoveEmployeeInsurance(e.value)">
                                                        <i class="fa fa-trash fa-2x text-danger" aria-hidden="true"></i>
                                                    </a>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </MudExpansionPanel>
                    </MudExpansionPanels>


                    <div style="text-align:center;" class="mt-4">
                        <button type="submit" class="btn btn-success col-md-2">Submit</button>
                        @*<button type="button" class="btn btn-danger col-md-2" @onclick="OnClose">Close</button>*@
                    </div>
                </EditForm>
                <Dailog Title="@Message" Show="@show" OnCloseDialog="ResetForm">
                    @if (show)
                    {
                        @if (TaskCompleted)
                        {
                            <div style="text-align:center;">
                                @MessageBody
                            </div>
                        }
                        else
                        {
                            <div style="text-align:center">
                                <div class="lds-ellipsis"><div></div><div></div><div></div><div></div></div>
                            </div>
                        }
                    }
                </Dailog>
                <FilePreviewDailog Title="Preview" Show="ShowPreview" ClosePreview="ClosePreview">
                    <iframe src="@filePath" style="height:400px; width:100%"></iframe>
                </FilePreviewDailog>
                @* <PageDialog Title="Add Skills" Show="AddSkill" ClosePageDialog="ClosePopUp">
            <AddSkillComponent />
            </PageDialog>*@
            }
        </div>
    </div>


</div>

@code {
    [Parameter]
    public string Key { get; set; } = string.Empty;

    public string Title = "Update your details";

    public bool AddSkill = false;

    Dictionary<int, List<int>> EmployeeSkillIds = new Dictionary<int, List<int>>();
    private List<int> SelectedSkill { get; set; } = new();

    string filePath = string.Empty;
    public bool ShowPreview = false;
    private bool show = false;
    string Message = string.Empty;
    string MessageBody = "Thank you!";
    bool IsError = false;
    bool IsSuccess = false;
    bool TaskCompleted = false;
    Employee model = new Employee();
    List<EmployeeSkills> SkillOptions = new();

    EmployeeFilesMapping employeeFiles = new();
    EmployeeOnboardingDto employeeOnboardingDto = new();

    private IBrowserFile? aadhaarFile;
    private IBrowserFile? panCardFile;
    private IBrowserFile? bankPassbookFile;
    private IBrowserFile? certificateFiles;
    private IBrowserFile? employeeProfilePhoto;

    string AdharFileErrorMsg = string.Empty;
    string PanFileErrorMsg = string.Empty;
    string BankPassFileErrorMsg = string.Empty;
    string CertificateFileErrorMsg = string.Empty;
    string ProfilePicFileErrorMsg = string.Empty;


    long FileSizeLimit = 1024 * 2048; //2Mb
    private List<File> files = new();
    private List<UploadResult> uploadResults = new();
    private int maxAllowedFiles = 3;

    private async Task LoadAadhaarFiles(InputFileChangeEventArgs e)
    {
        SizeLimitInfoAadhar = string.Empty;
        AdharFileErrorMsg = string.Empty;
        //if(e.File.Size > 2097152)
        if (e.File.Size > FileSizeLimit)
        {
            SizeLimitInfoAadhar = "File size is more then 2MB";
            aadhaarFile = null;
        }
        else
        {
            aadhaarFile = e.File;
        }
    }

    private async Task LoadPanFiles(InputFileChangeEventArgs e)
    {
        panCardFile = e.File;
        SizeLimitInfoPan = string.Empty;
        PanFileErrorMsg = string.Empty;
        if (e.File.Size > FileSizeLimit)
        {
            SizeLimitInfoPan = "File size is more then 2MB";
            panCardFile = null;
        }
        else
        {
            panCardFile = e.File;
        }
    }

    private async Task LoadBankFiles(InputFileChangeEventArgs e)
    {
        SizeLimitInfoPassbook = string.Empty;
        BankPassFileErrorMsg = string.Empty;
        if (e.File.Size > FileSizeLimit)
        {
            SizeLimitInfoPassbook = "File size is more then 2MB";
            bankPassbookFile = null;
        }
        else
        {
            bankPassbookFile = e.File;
        }
    }

    private async Task LoadCertificateFiles(InputFileChangeEventArgs e)
    {
        SizeLimitInfoCertificate = string.Empty;
        CertificateFileErrorMsg = string.Empty;
        if (e.File.Size > FileSizeLimit)
        {
            SizeLimitInfoCertificate = "File size is more then 2MB";
            certificateFiles = null;
        }
        else
        {
            certificateFiles = e.File;
        }
    }

    private async Task LoademployeeProfilePhoto(InputFileChangeEventArgs e)
    {
        SizeLimitInfoProfilePic = string.Empty;
        ProfilePicFileErrorMsg = string.Empty;
        //if(e.File.Size > 2097152)
        if (e.File.Size > FileSizeLimit)
        {
            SizeLimitInfoProfilePic = "File size is more then 2MB";
            employeeProfilePhoto = null;
        }
        else
        {
            employeeProfilePhoto = e.File;
        }
    }
    string SizeLimitInfoAadhar = string.Empty;
    string SizeLimitInfoPan = string.Empty;
    string SizeLimitInfoPassbook = string.Empty;
    string SizeLimitInfoCertificate = string.Empty;
    string SizeLimitInfoProfilePic = string.Empty;

    private string BaseUri = string.Empty;
    string AdharView = string.Empty;
    string PanView = string.Empty;
    string BankPassView = string.Empty;
    string CertificateView = string.Empty;
    string ProfilePicView = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        BaseUri = NavigationManager.BaseUri;
        TaskCompleted = false;
        try
        {
            SkillOptions = new List<EmployeeSkills>(await client.GetAllSkill());
            var responce = await client.EmployeeGetSelfDetail(Key);
            if (responce.IsSuccess)
            {
                model = responce.Result;
                TaskCompleted = true;
            }
            else
            {
                show = true;
                Message = "Error!";
                MessageBody = responce.Message;
                TaskCompleted = true;
            }
            var skillOption = await client.GetEmployeeSkillsIDs(model.Id);
            SelectedSkill.AddRange(skillOption.Select(tc => tc.EmployeeSkillId));
            var EI = new List<EmployeeInsurance>(await client.GetEmployeeInsuranceById(model.Id));
            EmployeeInsurance = EI;
            employeeFiles = await GetEmployeeFiles(model.Id);
            if (employeeFiles != null)
            {
                if (employeeFiles.AadhaarFile != "")
                    AdharView = $"{BaseUri}EmployeesZone/{employeeFiles.AadhaarFile}";
                if (employeeFiles.PanFile != "")
                    PanView = $"{BaseUri}EmployeesZone/{employeeFiles.PanFile}";
                if (employeeFiles.BankPassbookFile != "")
                    BankPassView = $"{BaseUri}EmployeesZone/{employeeFiles.BankPassbookFile}";
                if (employeeFiles.CertificateFile != "")
                    CertificateView = $"{BaseUri}EmployeesZone/{employeeFiles.CertificateFile}";
                if (employeeFiles.ProfilePhotoFile != "")
                    ProfilePicView = $"{BaseUri}EmployeesZone/{employeeFiles.ProfilePhotoFile}";
            }
        }
        catch (Exception ex)
        {
            Message = "Error!";
            MessageBody = ex.Message;
            TaskCompleted = true;
        }

    }
    public async Task<EmployeeFilesMapping> GetEmployeeFiles(int id)
    {
        return await client.GetEmployeeFilesById(id);
    }
    protected async Task OnValidSubmit()
    {
        Message = string.Empty;
        MessageBody = "Thank you!";
        IsError = false;
        IsSuccess = false;
        TaskCompleted = false;
        bool FileError = false;

        AdharFileErrorMsg = string.Empty;
        PanFileErrorMsg = string.Empty;
        BankPassFileErrorMsg = string.Empty;
        CertificateFileErrorMsg = string.Empty;
        ProfilePicFileErrorMsg = string.Empty;


        if (aadhaarFile == null && AdharView == "") { AdharFileErrorMsg = "File is required!"; FileError = true; }
        if (panCardFile == null && PanView == "") { PanFileErrorMsg = "File is required!"; FileError = true; }
        if (bankPassbookFile == null && BankPassView == "") { BankPassFileErrorMsg = "File is required!"; FileError = true; }
        if (certificateFiles == null && CertificateView == "") { CertificateFileErrorMsg = "File is required!"; FileError = true; }
        if (employeeProfilePhoto == null && ProfilePicView == "") { ProfilePicFileErrorMsg = "File is required!"; FileError = true; }
        if (FileError == true)
            return;

        show = true;
        try
        {
            Message = "Please wait";
            int Id = model.Id;
            model.EmployeeInsurance = EmployeeInsurance;
            var response = await client.EmployeeDetailSeftUpdate(model);

            if (response.IsSuccess)
            {
                if (EmployeeSkillIds.ContainsKey(model.Id))
                {
                    EmployeeSkillIds[model.Id] = SelectedSkill.Select(id => id).ToList();
                }
                else
                {
                    EmployeeSkillIds.Add(model.Id, SelectedSkill.Select(id => id).ToList());
                }

                var result = await client.UpsertEmployeeSkillsIDsMap(EmployeeSkillIds);
                EmployeeFilesMapping employeeFilesMapping = new EmployeeFilesMapping();

                string[] propertyNames = { "Aadhaar", "Pan", "BankPassbook", "Certificate", "ProfilePhoto" };

                foreach (string propertyName in propertyNames)
                {
                    IBrowserFile file = null;
                    switch (propertyName)
                    {
                        case "Aadhaar":
                            file = aadhaarFile;
                            break;
                        case "Pan":
                            file = panCardFile;
                            break;
                        case "BankPassbook":
                            file = bankPassbookFile;
                            break;
                        case "Certificate":
                            file = certificateFiles;
                            break;
                        case "ProfilePhoto":
                            file = employeeProfilePhoto;
                            break;
                    }

                    if (file != null)
                    {
                        var uploadedFile = await FileUpload(file, propertyName);
                        // employeeFilesMapping.GetType().GetProperty(propertyName + "File")?.SetValue(employeeFilesMapping, uploadedFile);


                        var propertyInfo = typeof(EmployeeFilesMapping).GetProperty(propertyName + "File");
                        if (propertyInfo != null)
                        {
                            propertyInfo.SetValue(employeeFilesMapping, uploadedFile);
                        }
                    }
                }

                employeeFilesMapping.EmployeeId = model.Id;

                var UploadResponse = await client.UpsertEmployeeFiles(employeeFilesMapping);

                Message = Id > 0 ? "Successfully Updated" : "Successfully Added";
                TaskCompleted = true;
            }
            else
            {
                Message = "Error!";
                MessageBody = response.Message;
                TaskCompleted = true;
            }

        }
        catch (Exception ex)
        {
            logger.LogCritical(ex, ex.Message);
            IsError = true;
            Message = "Error!";
            MessageBody = ex.Message;
            TaskCompleted = true;
        }
    }

    private void CopyAddress(ChangeEventArgs args)
    {
        if (!model.checkbox)
        {
            model.CurrentAddress = model.PermanentAddress;
            model.CState = model.PState;
            model.CCountry = model.PCountry;
            model.CPin = model.PPin;
        }
        else
        {
            model.CurrentAddress = string.Empty;
            model.CState = string.Empty;
            model.CCountry = string.Empty;
            model.CPin = string.Empty;
        }
    }
    private async void ResetForm()
    {
        show = false;
        if (Message.Contains("Successfully Updated"))
        {
            await JSRuntime.InvokeVoidAsync("blazorCloseTab");
        }
    }
    public void OnClose()
    {
        NavigationManager.NavigateTo("/employees");
    }
    public async void ClosePopUp()
    {
        show = false;
        AddSkill = false;
        ShowPreview = false;
        //SkillOptions = new List<EmployeeSkills>(await client.GetAllSkill());
        StateHasChanged();
    }

    //protected override bool ShouldRender() => shouldRender;

    private async Task<string> FileUpload(IBrowserFile file, string type)
    {
        //shouldRender = false;
        long maxFileSize = 1024 * 2048;
        var upload = false;
        files.Clear();
        using var content = new MultipartFormDataContent();

        string newFileName = $"{model.EmployeeName} - {model.EmployeeId} - {type} - {file.Name}";

        if (uploadResults.SingleOrDefault(
            f => f.FileName == file.Name) is null)
        {
            try
            {
                files.Add(new() { Name = file.Name });

                var fileContent =
                    new StreamContent(file.OpenReadStream(maxFileSize));

                fileContent.Headers.ContentType =
                    new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);

                content.Add(
                    content: fileContent,
                    name: "\"files\"",
                    fileName: newFileName);

                upload = true;
            }
            catch (Exception ex)
            {
                logger.LogInformation(
                    "{FileName} not uploaded (Err: 6): {Message}",
                    file.Name, ex.Message);

                uploadResults.Add(
                    new()
                        {
                            FileName = file.Name,
                            ErrorCode = 6,
                            Uploaded = false
                        });
            }
        }

        string FilePath = string.Empty;
        if (upload)
        {
            try
            {

                var response = await httpClient.PostAsync("/Filesave", content);

                var newUploadResults = await response.Content
                    .ReadFromJsonAsync<IList<UploadResult>>();

                if (newUploadResults is not null)
                {
                    uploadResults = uploadResults.Concat(newUploadResults).ToList();
                    foreach (var r in uploadResults)
                    {
                        FilePath = r.FileName;
                        if (FilePath.Contains("Aadhaar"))
                            aadhaarFile = null;
                        else if (FilePath.Contains("Pan"))
                            panCardFile = null;
                        else if (FilePath.Contains("BankPassbook"))
                            bankPassbookFile = null;
                        else if (FilePath.Contains("certificate"))
                            certificateFiles = null;
                        else if (FilePath.Contains("ProfilePhoto"))
                            employeeProfilePhoto = null;
                    }
                }

            }
            catch (Exception ex)
            {
                //throw;
            }
        }

        //shouldRender = true;
        return FilePath;
    }

    private static bool FileUpload(IList<UploadResult> uploadResults,
        string? fileName, ILogger<EmployeeDataConfig> logger, out UploadResult result)
    {
        result = uploadResults.SingleOrDefault(f => f.FileName == fileName) ?? new();

        if (!result.Uploaded)
        {
            logger.LogInformation("{FileName} not uploaded (Err: 5)", fileName);
            result.ErrorCode = 5;
        }

        return result.Uploaded;
    }

    private class File
    {
        public string? Name { get; set; }
    }

    public async void ClosePreview()
    {
        show = false;
        AddSkill = false;
        ShowPreview = false;
        StateHasChanged();
    }

     private int CalculateAge(DateTime dob)
    {
        var today = DateTime.Today;
        var age = today.Year - dob.Year;
        if (dob.Date > today.AddYears(-age)) age--;
        return age;
    }
    public List<EmployeeInsurance> EmployeeInsurance { get; set; } = new List<EmployeeInsurance>();
    int SN = 0;
    private void AddEmployeeInsurance()
    {
        EmployeeInsurance.Add(new EmployeeInsurance());
    }

    private void RemoveEmployeeInsurance(EmployeeInsurance e)
    {
        EmployeeInsurance.Remove(e);
    }
    
    private bool IsImageFile(string filePath)
    {
        string[] imageExtensions = { ".jpg", ".jpeg", ".png", ".gif", ".bmp" }; // Add more extensions if needed

        string extension = System.IO.Path.GetExtension(filePath);
        return imageExtensions.Contains(extension, StringComparer.OrdinalIgnoreCase);
    }

}
