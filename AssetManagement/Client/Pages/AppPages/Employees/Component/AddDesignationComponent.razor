@using AssetManagement.Client.Client;
@using AssetManagement.Dto.Models;
@inject AppClient client

<div class="text-primary" style="text-align: center;">@Message</div>
<div class="table-responsive" style="max-height:300px; margin-top:1px !important">
    <table class="table table-striped table-bordered" style="margin-bottom: 0.2rem !important;">
        <tbody>
            <tr>
                <td colspan="3" style="padding: 0px 0 !important;">
                    <table class="table">
                        <thead style="text-align:center">
                            <tr>
                                <th style="width: 90%">Designation</th>
                                <th style="width: 10%"><a title="Add Row" style="cursor:pointer; color:darkblue" @onclick="AddDesignation"><i class="fa fa-plus-circle fa-2x" aria-hidden="true"></i></a></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var dg in designationDTO)
                            {
                                <tr>
                                    <td><input type="text" class="form-control" @bind="@dg.Designation" /></td>
                                    <td style="text-align:center"><a title="Remove Row" style="cursor:pointer;" @onclick="() => RemoveDesignation(dg)"><i class="fa fa-trash fa-2x text-danger" aria-hidden="true"></i></a></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </td>
            </tr>
        </tbody>
    </table>
    <div style="text-align:center;">
        <button type="submit" class="btn btn-success col-md-3 mb-1 btn-sm" @onclick="OnSave">Submit</button>
    </div>

</div>


@code {

    public string Title = "Add Designation";
    public bool Check { get; set; } = false;
    string Message = string.Empty;
    public List<DesignationDTO> designationDTO { get; set; } = new List<DesignationDTO>();

    private Timer _timer;
    private int _delay = 2500;

    protected override async Task OnInitializedAsync()
    {
        designationDTO.Add(new DesignationDTO());
    }
    protected async Task OnSave()
    {
        Message = string.Empty;
        if (designationDTO.Any(o => o.Designation == string.Empty) || designationDTO.Count() == 0)
        {
            Message = "Empty Designation Name!";
            _timer = new Timer(TimerCallback, null, _delay, Timeout.Infinite);
            return;
        }
        designationDTO = await client.UpsertDesignationAsync(designationDTO);
        Message = "Successfully Saved!";

        StateHasChanged();
        designationDTO = new();
        designationDTO.Add(new DesignationDTO());
        _timer = new Timer(TimerCallback, null, _delay, Timeout.Infinite);

    }

    private void AddDesignation()
    {
        designationDTO.Add(new DesignationDTO());
    }

    private void RemoveDesignation(DesignationDTO dg)
    {
        designationDTO.Remove(dg);
    }

    private void TimerCallback(Object o)
    {
        Message = string.Empty;
        _timer.Dispose();
        StateHasChanged();

    }
}
