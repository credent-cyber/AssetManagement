@using AssetManagement.Client.Client;
@using AssetManagement.Dto.Models;
@inject AppClient client

<div class="text-primary" style="text-align: center;">@Message</div>
<div class="table-responsive" style="max-height:300px; margin-top:1px !important;">
    <table class="table table-striped table-bordered">
        <tbody>
                <tr>
                    <td class="col-md-12 col-lg-6">
                        <div class="d-md-flex align-items-center">
                        @*  <label for="Question" class="bold-font mb-0 mr-2">AssetType Name </label>
                        @if (Check)
                        {
                            <InputSelect class="form-control" @bind-Value="@assetType.Id" @onchange="(e) => SyncAssetType(e)">
                                @foreach (var t in assetTypes)
                                {                                   
                                    <option value="@t.Id" >@t.Name</option>
                                }
                            </InputSelect>
                        }
                        else
                        {
                            <input type="text" class="form-control" @bind="@assetType.Name" />                          
                        }
                        <input type="checkbox" @bind-value="Check" @onclick="LoadTypes" class="form-check-input ml-2" style="margin-top:3px;" />
                        *@
                        <label for="Question" class="bold-font mb-0 mr-2">AssetType </label>
                        <input type="text" class="form-control" @bind="@assetType.Name" placeholder="Ex. Laptop"/>                          
                        </div>
                    </td>                   
                </tr>

                <tr>
                    <td colspan="3" style="padding: 0px 0 !important;">
                        <table class="table">
                            <thead style="text-align:center">
                                <tr>
                                    <th style="width: 10%">Number</th>
                                    <th style="width: 80%">Sub AssetType</th>
                                    <th style="width: 10%"><a title="Add Row" style="cursor:pointer; color:darkblue" @onclick="() => AddChild(assetType)"><i class="fa fa-plus-circle fa-2x" aria-hidden="true"></i></a></th>
                                </tr>
                            </thead>
                            <tbody>
                            @foreach (var subAsset in assetType.SubAssets)
                                {
                                    <tr>
                                        <td><input type="number" class="form-control" @bind="@subAsset.Number" /></td>
                                        <td><input type="text" class="form-control" @bind="@subAsset.Name" /></td>
                                        <td style="text-align:center"><a title="Remove Row" style="cursor:pointer;" @onclick="() => RemoveChild(assetType, subAsset)"><i class="fa fa-trash fa-2x text-danger" aria-hidden="true"></i></a></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </td>
                </tr>
        </tbody>
    </table>
    <div style="text-align:center;">
        <button type="submit" class="btn btn-success col-md-3 mb-1 btn-sm" @onclick="OnSave">Submit</button>
    </div>
</div>


@code {
    public async void LoadTypes()
    {
        assetTypes = new List<AssetType>(await client.GetAllAssetType());
        StateHasChanged();
    }
    public async Task SyncAssetType(ChangeEventArgs e)
    {
        int assetTypeId = Convert.ToInt32(e.Value);
        assetType = await client.GetAssetTypeById(assetTypeId);
        StateHasChanged();
    }

    public string Title = "Add AssetType";
    public bool Check { get; set; } = false;
    string Message = string.Empty;
    AssetType assetType = new();
    List<AssetType> assetTypes = new();

    private Timer _timer;
    private int _delay = 2500;

    protected override async Task OnInitializedAsync()
    {
        assetTypes = new List<AssetType>(await client.GetAllAssetType());
    }
    protected async Task OnSave()
    {
        Message = string.Empty;
        if (assetType.Name == null || assetType.Name == "")
        {
            Message = "Please add Asset Type!";
            _timer = new Timer(TimerCallback, null, _delay, Timeout.Infinite);
            return;
        }
        var response = await client.UpsertAssetTypeAsync(assetType);
        if (response.IsSuccess)
        {
            assetType = response.Result;
            Message = "Successfully Saved!";
           
        }
        else
        {
            //Message = "Error!";
            Message = response.Message;
        }
        StateHasChanged();
        assetType = new();
        _timer = new Timer(TimerCallback, null, _delay, Timeout.Infinite);

    }

    private void AddChild(AssetType assetType)
    {
        var newTrainingQuizAnswer = new SubAsset
            {
                Number = assetType.SubAssets.Count + 1
            };
        assetType.SubAssets.Add(newTrainingQuizAnswer);
        UpdateOrderNumbers(assetType.SubAssets);
    }

    private void RemoveChild(AssetType assetTypes, SubAsset subAsset)
    {
        assetTypes.SubAssets.Remove(subAsset);
        UpdateOrderNumbers(assetTypes.SubAssets);
    }
    private void UpdateOrderNumbers(IEnumerable<SubAsset> subAsset)
    {
        int orderNumber = 1;
        foreach (var sub in subAsset)
        {
            sub.Number = orderNumber++;
        }
    }

    private void HandleAssetTypeChange(ChangeEventArgs e)
    {
        this.assetType.Name = e.Value.ToString();
    }

    private void TimerCallback(Object o)
    {
        Message = string.Empty;
        _timer.Dispose();
        StateHasChanged();

    }
}
