@page "/assets"
@page "/assets/{cmp}/{label?}"
@using AssetManagement.Client.Pages.GridComponent
@using AssetManagement.Dto.Models;
@using DocumentFormat.OpenXml;
@using DocumentFormat.OpenXml.Packaging;
@using DocumentFormat.OpenXml.Spreadsheet;
@using AssetManagement.Client.Client;
@using System.Text.RegularExpressions;
@using AssetManagement.Client.Shared.Popup
@using AssetManagement.Dto;
@using System.Globalization;
@using Microsoft.Extensions.Primitives;
@using MudBlazor
@inject ILogger<AllAssetGrid> logger
@inject AppClient client
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime

<div class="card">
    <div class="card-header" style="padding: 8px !important; display: flex; align-items: center;">
        <MudButton Href="asset-config"
                   Variant="Variant.Outlined"
                   Color="MudBlazor.Color.Tertiary"
                   Size="Size.Small"
                   Disabled=false>
            Add Asset
        </MudButton>
        <div style="margin-left: auto;">
            <ol class="breadcrumb" style="display: flex; justify-content: flex-end; align-items: center; list-style: none; padding: 0; margin: 0;">
                <li class="breadcrumb-item"><a href="/"><i class="fa fa-home" aria-hidden="true"></i></a></li>
                <li class="breadcrumb-item active">Assets</li>
            </ol>
        </div>

    </div>


    <div class="card-body">
        <div class="card-header" style="padding: 8px !important;">
            <div class="row">
                <div class="col-md-6 mb-2 mb-md-0">
                    <div class="d-flex flex-md-row">
                        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles" Accept=".xlsx">
                            <ButtonTemplate>
                                <MudButton HtmlTag="label"
                                           Variant="Variant.Outlined"
                                           Color="MudBlazor.Color.Primary"
                                           StartIcon="@Icons.Material.Filled.Download"
                                           Size="Size.Small"
                                           Class="mr-2"
                                           Style="margin-top: -8px;"
                                           for="@context">
                                    Import Assets
                                </MudButton>
                            </ButtonTemplate>
                        </MudFileUpload>
                        <a href="sample-data/AssetImportTemplate.xlsx" title="Asset Template" class="ml-5" style="margin-top: 3px;">
                            <i class="fa fa-cloud-download fa-2x text-info" aria-hidden="true"></i>
                        </a>
                    </div>


                </div>
                <div class="col-md-6">
                    <div class="d-flex flex-column flex-md-row justify-content-md-end">
                        <MudButton Href="AssetTransfer"
                                   Variant="Variant.Outlined"
                                   Color="MudBlazor.Color.Warning"
                                   Size="Size.Small"
                                   Class="mb-2 mb-md-0 mr-md-2">
                            Asset Transfer
                        </MudButton>
                    </div>
                </div>
            </div>
        </div>

        @if (cmp != null)
        {
            @if (_task.IsCompleted)
            {
                <div class="row">
                    <div class="col-sm-12">
                        <GridComponent T="Asset" Grid="@_grid"></GridComponent>
                    </div>
                </div>
            }
            else
            {
                <div class="loader-container mt-4">
                    <div class="loader"></div>
                </div>

            }
        }
        else
        {
            <AssetsGrid @ref="assetsGridRef" />
        }
    </div>

    <ImportViewDailog Title="Import Assets" Show="show" OnCloseDialog="CloseDailogBox">
        @if (assets?.Count() > 0)
        {
            <div style="padding-top: -45%">
                @if (!Imported)
                {
                    <ImportAsset DataList="assets"></ImportAsset>
                    <div style="text-align:center;" class="mt-4">
                        <button @onclick="ImportAssetAsync" class="btn btn-outline-primary">Import</button>
                        <button @onclick="CloseDailogBox" class="btn btn-outline-danger"> Close </button>
                    </div>
                }
                else
                {
                    @Message
                    <div style="text-align:center;" class="mt-4">
                        <button @onclick="CloseDailogBox" class="btn btn-outline-danger"> Close.</button>
                    </div>
                }
            </div>
        }
        else
        {
            @if (string.IsNullOrEmpty(Message))
            {
                <div>No data found</div>
            }
            else
            {
                @Message
            }
            <br />
            <div style="text-align:center;" class="mt-4">
                <button @onclick="CloseDailogBox" class="btn btn-outline-danger"> Close </button>
            </div>
        }
    </ImportViewDailog>
</div>
@code {
    [Parameter]
    public string cmp { get; set; }
    [Parameter]
    public string label { get; set; }

    private AssetsGrid assetsGridRef;
    private bool show = false;
    string Message = string.Empty;
    string MessageBody = "Thank you!";
    bool IsError = false;
    bool IsSuccess = false;
    bool TaskCompleted = false;
    bool Imported = false;
    List<AssetImport> assets = new List<AssetImport>();
    int MaxAllowedFileSize = 512000;
    int NumberOfColumnInSheet = 10;

    IBrowserFile files;
    private async void UploadFiles(IBrowserFile files)
    {
        IsError = false;
        Message = string.Empty;
        string ErrorMessage = string.Empty;
        TaskCompleted = false;
        show = false;
        assets.Clear();
        var file = files;
        int count = 0;
        int ErrorCount = 0;
        try
        {
            show = true;
            Message = "Please wait...";
            if (files.Size > MaxAllowedFileSize)
            {
                TaskCompleted = true;
                Message = $"File size is greater then {MaxAllowedFileSize / 1024} Kb";
                StateHasChanged();
                return;
            }

            using (MemoryStream ms = new MemoryStream())
            {
                // copy data from file to memory stream
                await file.OpenReadStream().CopyToAsync(ms);
                // positions the cursor at the beginning of the memory stream
                ms.Position = 0;

                // open the Excel document using OpenXML
                using (SpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.Open(ms, false))
                {
                    // get the first sheet of the workbook
                    WorksheetPart worksheetPart = spreadsheetDocument.WorkbookPart.WorksheetParts.First();
                    Worksheet worksheet = worksheetPart.Worksheet;

                    // Find the dimensions of the worksheet
                    SheetData sheetData = worksheet.GetFirstChild<SheetData>();
                    if (worksheet.SheetDimension == null)
                    {
                        Message = "There is some preblem in sheet, Please check.";
                        TaskCompleted = true;
                        StateHasChanged();
                        return;
                    }
                    string dimensions = worksheet.SheetDimension.Reference.Value;

                    // Extract the number of columns from the dimensions
                    int lastColumnIndex = 0;
                    try
                    {
                        lastColumnIndex = GetLastColumnIndex(dimensions);
                    }
                    catch (Exception ex)
                    {
                        TaskCompleted = true;
                        Message = ex.Message;
                        StateHasChanged();
                        return;
                    }
                    if (lastColumnIndex != NumberOfColumnInSheet)
                    {
                        TaskCompleted = true;
                        Message = $"Sheet column mismatch or invalid sheet!";
                        StateHasChanged();
                        return;
                    }

                    // iterate over the rows in the sheet
                    foreach (DocumentFormat.OpenXml.Spreadsheet.Row row in worksheet.Descendants<DocumentFormat.OpenXml.Spreadsheet.Row>())
                    {
                        // skip the header row
                        if (row.RowIndex.Value == 1) continue;

                        // create a new EmployeeImport object
                        AssetImport asset = new AssetImport();

                        // iterate over the cells in the row
                        foreach (Cell cell in row.Descendants<Cell>())
                        {
                            // get the value of the cell
                            string value = cell.InnerText;
                            if (cell.DataType != null && cell.DataType.Value == CellValues.SharedString)
                            {
                                SharedStringItem ssi = spreadsheetDocument.WorkbookPart.SharedStringTablePart.SharedStringTable.Elements<SharedStringItem>().ElementAt(int.Parse(value));
                                value = ssi.Text.Text.Trim();
                            }

                            // map the value of the cell to the corresponding property of the EmployeeImport object
                            string column = Regex.Match(cell.CellReference.Value, "[A-Z]+").Value;
                            try
                            {
                                switch (column)
                                {
                                    case "A":
                                        asset.CompanyCode = value.ToUpper().Trim();
                                        break;
                                    case "B":
                                        asset.AssetType = value.ToUpper().Trim();
                                        break;
                                    case "C":
                                        asset.SubAssetType = value.Trim();
                                        break;
                                    case "D":
                                        asset.Brand = value.Trim();
                                        break;
                                    case "E":
                                        asset.Model = value.Trim();
                                        break;
                                    case "F":
                                        asset.SerialNumber = value.Trim();
                                        break;
                                    case "G":
                                        asset.MacAddress = value.Trim();
                                        break;
                                    case "H":
                                        asset.Description = value.Trim();
                                        break;
                                    case "I":
                                        if (value == "")
                                        {
                                            value = "01-01-0001";
                                            DateTime dateOfLeaving = DateTime.ParseExact(value, "dd-MM-yyyy", CultureInfo.InvariantCulture);
                                            asset.AcquireDate = dateOfLeaving;
                                        }
                                        else
                                        {
                                            asset.AcquireDate = DateTime.FromOADate(double.Parse(value));
                                        }
                                        break;
                                    case "J":
                                        asset.VendorName = value.Trim();
                                        break;

                                }
                            }
                            catch (Exception ex)
                            {
                                IsError = true;
                                ErrorMessage += $"\n{++ErrorCount} : " + ex.Message + $" Check Row {row.RowIndex.Value} and Column {column}";

                                if (count >= worksheet.Descendants<DocumentFormat.OpenXml.Spreadsheet.Row>().Count())
                                {
                                    assets.Clear();
                                    show = true;
                                    TaskCompleted = true;
                                    Message = ErrorMessage;
                                    StateHasChanged();
                                    return;
                                }
                            }
                        }

                        //employee.Validate();
                        //if (employee.ValidationErrMsg is not null)
                        //{
                        //    IsError = true;
                        //    ErrorMessage += $"\n{++ErrorCount} : " + employee.ValidationErrMsg + $" Check {employee.EmployeeName} Data \n";
                        //if (count >= worksheet.Descendants<DocumentFormat.OpenXml.Spreadsheet.Row>().Count())
                        //{
                        //    assets.Clear();
                        //    show = true;
                        //    TaskCompleted = true;
                        //    Message = ErrorMessage;
                        //    StateHasChanged();
                        //    return;
                        //}
                        //}
                        if (assets.Any(i => i.SerialNumber == asset.SerialNumber && i.AssetType.Equals("Laptop", StringComparison.OrdinalIgnoreCase)))
                            continue;
                        if (asset.SerialNumber == string.Empty && asset.AssetType.Equals("Laptop", StringComparison.OrdinalIgnoreCase))
                            continue;
                        else
                            assets.Add(asset);
                    }

                    show = true;
                    TaskCompleted = true;
                    StateHasChanged();
                }


            }
        }
        catch (ArgumentException ex)
        {
            //logger.LogError("Error occurred while importing employees : {0}", ex.Message);
            Message = ex.Message;
            show = true;
            TaskCompleted = true;
            StateHasChanged();
        }
    }
    private int GetLastColumnIndex(string dimensions)
    {
        string[] dimensionsSplit = dimensions.Split(':');
        string lastCellReference = dimensionsSplit[1];
        string columnName = Regex.Replace(lastCellReference, @"\d", "");
        int columnIndex = 0;
        int power = 1;
        for (int i = columnName.Length - 1; i >= 0; i--)
        {
            char character = columnName[i];
            columnIndex += (character - 'A' + 1) * power;
            power *= 26;
        }
        return columnIndex;
    }

    public async Task ImportAssetAsync()
    {
        var response = await client.UpsertImportAssetAsync(assets);
        if (response.IsSuccess)
        {
            assets = response.Result;
            Message = "Successfully Imported/Updated";
            Imported = true;
        }
        else
        {
            Message = response.Message;
            Imported = true;
        }
    }
    private void CloseDailogBox()
    {
        show = false;
        IsError = false;
        Message = string.Empty;
        assets.Clear();
        TaskCompleted = false;
        Imported = false;
        assetsGridRef.RefreshGrid();
    }

    ////////////////////////

    private CGrid<Asset> _grid;
    private Task _task;
    static bool filter = true;

    Action<IGridColumnCollection<Asset>> columns = c =>
    {
        c.Add(o => o.Id).SetWidth("50px").Css("table-bordered").Titled("SN.");
        c.Add(o => o.CompanyCode).SetWidth("50px").Css("table-bordered").Titled("Company");
        c.Add(o => o.AssetType).SetWidth("50px").Css("table-bordered");
        c.Add(o => o.SubAssetType).SetWidth("50px").Css("table-bordered");
        c.Add(o => o.Brand).SetWidth("50px").Css("table-bordered");
        c.Add(o => o.Model).SetWidth("50px").Css("table-bordered");
        c.Add(o => o.Description).Css("table-bordered");
        c.Add(o => o.SerialNumber).SetWidth("50px").Css("table-bordered");
        c.Add(o => o.MacAddress).SetWidth("50px").Css("table-bordered");
        c.Add(o => o.Status).SetWidth("50px").Css("table-bordered");
        c.Add(o => o.AcquireDate).Format("{0:dd/MM/yyyy}").SetWidth("50px").Css("table-bordered");
        c.Add(o => o._AssetStatus).SetWidth("50px").Css("table-bordered");
        c.Add(o => o.DiscardDate).Format("{0:dd/MM/yyyy}").SetWidth("50px").Css("table-bordered");
    };

    protected override async Task OnParametersSetAsync()
    {
        string url = $"odata/Asset";
        var query = new QueryDictionary<StringValues>();
        //query.Add("grid-sorting", "Id__1__1");

        if (cmp != null)
        {
            if (label == "Allocated Assets")
            {
                var values = new string[] { $"Status__1__{"Allocated"}", $"CompanyCode__1__{cmp}" };
                query.Add("grid-filter", new StringValues(values));
            }

            else if (label == "Free Assets")
            {
                var values = new string[] { $"Status__1__{"Free"}", $"CompanyCode__1__{cmp}" };
                query.Add("grid-filter", new StringValues(values));
            }
            else if (label == "Active Assets")
            {
                var values = new string[] { $"_AssetStatus{"Active"}", $"CompanyCode__1__{cmp}" };
                query.Add("grid-filter", new StringValues(values));
            }
            else if (label == "Discarded Assets")
            {
                var values = new string[] { $"_AssetStatus{"Discarded"}", $"CompanyCode__1__{cmp}" };
                query.Add("grid-filter", new StringValues(values));
            }
            else
            {
                var values = new string[] { $"CompanyCode__1__{cmp}" };
                query.Add("grid-filter", new StringValues(values));
            }
        }
        var client = new GridODataClient<Asset>(HttpClient, url, query, false, "AssetGrid", columns, 10)
        .Sortable(false)
        .Filterable(false)
        .ClearFiltersButton(true)
        .SetStriped(true)
        .WithGridItemsCount()
        .SetExcelExport(true, true, "Asset.xlsx")
        .ChangePageSize(true)
        .EmptyText("No data available")
        .SetKeyboard(true)
        .Searchable(true, false, false);

        _grid = client.Grid;
        _task = client.UpdateGrid();
        await _task;
    }
}
